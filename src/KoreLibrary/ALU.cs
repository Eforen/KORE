using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kore
{
    public class ALU64
    {
        public enum FUNC : byte
        {
            ADD,
            SUB,
            AND,
            OR,
            XOR,
            SLT,
            SLTU,
            SLL,
            SRA,
            SRL,
        }

        public enum BR_FUNC: byte
        {
            /// <summary>
            /// Equal
            /// </summary>
            EQ,
            /// <summary>
            /// Not Equal
            /// </summary>
            NEQ,
            /// <summary>
            /// Less than Signed 
            /// </summary>
            LT,
            /// <summary>
            /// Less than Unsigned
            /// </summary>
            LTU,
            /// <summary>
            /// Greater than Signed
            /// </summary>
            GE,
            /// <summary>
            /// Greater than Unsigned
            /// </summary>
            GEU,
        }

        public bool branch(uint a, uint b, BR_FUNC func)
        {
            switch (func)
            {
                case BR_FUNC.EQ:
                    return a == b;
                case BR_FUNC.NEQ:
                    return a != b;
                case BR_FUNC.LT:
                    return (int)(a) < (int)(b);
                case BR_FUNC.LTU:
                    return a < b;
                case BR_FUNC.GE:
                    return (int)(a) > (int)(b);
                case BR_FUNC.GEU:
                    return a > b;
                default:
                    return false;
            }
        }

        public ulong signExtend(ulong from, byte fromBits, byte toBits)
        {
            if (fromBits > TOTAL_BITMASK_LENGTH) fromBits = TOTAL_BITMASK_LENGTH;
            if (toBits > TOTAL_BITMASK_LENGTH) toBits = TOTAL_BITMASK_LENGTH;
            if ((from & getBitMask(fromBits)) > 0)
			{
				// Must be a negative number set all bits high
				return
					(
						getDataMask((byte)(TOTAL_BITMASK_LENGTH - fromBits + 1), true) // Get mask
						| from //assert 1s to all high bits
					) & getDataMask(toBits, false); // only keep the target size bits zero all others beyond that

			} else
			{
                // Must be a positive number set all bits low
                return
                    (
						getDataMask(fromBits, false) // Get mask
						& from //assert 1s to all high bits
					) & getDataMask(toBits, false); // only keep the target size bits zero all others beyond that
            }
        }

        /// <summary>
        /// Used to get the top ith bits  
        /// </summary>
        private readonly ulong[] dataMaskHigh = {
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 0, 0x0
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 1, 0x1
			0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 2, 0x2
			0b11000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 3, 0x3
			0b11100000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 4, 0x4
			0b11110000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 5, 0x5
			0b11111000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 6, 0x6
			0b11111100_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 7, 0x7
			0b11111110_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 8, 0x8
			0b11111111_00000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 9, 0x9
			0b11111111_10000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 10, 0xa
			0b11111111_11000000_00000000_00000000_00000000_00000000_00000000_00000000, // High 11, 0xb
			0b11111111_11100000_00000000_00000000_00000000_00000000_00000000_00000000, // High 12, 0xc
			0b11111111_11110000_00000000_00000000_00000000_00000000_00000000_00000000, // High 13, 0xd
			0b11111111_11111000_00000000_00000000_00000000_00000000_00000000_00000000, // High 14, 0xe
			0b11111111_11111100_00000000_00000000_00000000_00000000_00000000_00000000, // High 15, 0xf
			0b11111111_11111110_00000000_00000000_00000000_00000000_00000000_00000000, // High 16, 0x10
			0b11111111_11111111_00000000_00000000_00000000_00000000_00000000_00000000, // High 17, 0x11
			0b11111111_11111111_10000000_00000000_00000000_00000000_00000000_00000000, // High 18, 0x12
			0b11111111_11111111_11000000_00000000_00000000_00000000_00000000_00000000, // High 19, 0x13
			0b11111111_11111111_11100000_00000000_00000000_00000000_00000000_00000000, // High 20, 0x14
			0b11111111_11111111_11110000_00000000_00000000_00000000_00000000_00000000, // High 21, 0x15
			0b11111111_11111111_11111000_00000000_00000000_00000000_00000000_00000000, // High 22, 0x16
			0b11111111_11111111_11111100_00000000_00000000_00000000_00000000_00000000, // High 23, 0x17
			0b11111111_11111111_11111110_00000000_00000000_00000000_00000000_00000000, // High 24, 0x18
			0b11111111_11111111_11111111_00000000_00000000_00000000_00000000_00000000, // High 25, 0x19
			0b11111111_11111111_11111111_10000000_00000000_00000000_00000000_00000000, // High 26, 0x1a
			0b11111111_11111111_11111111_11000000_00000000_00000000_00000000_00000000, // High 27, 0x1b
			0b11111111_11111111_11111111_11100000_00000000_00000000_00000000_00000000, // High 28, 0x1c
			0b11111111_11111111_11111111_11110000_00000000_00000000_00000000_00000000, // High 29, 0x1d
			0b11111111_11111111_11111111_11111000_00000000_00000000_00000000_00000000, // High 30, 0x1e
			0b11111111_11111111_11111111_11111100_00000000_00000000_00000000_00000000, // High 31, 0x1f
			0b11111111_11111111_11111111_11111110_00000000_00000000_00000000_00000000, // High 32, 0x20
			0b11111111_11111111_11111111_11111111_00000000_00000000_00000000_00000000, // High 33, 0x21
			0b11111111_11111111_11111111_11111111_10000000_00000000_00000000_00000000, // High 34, 0x22
			0b11111111_11111111_11111111_11111111_11000000_00000000_00000000_00000000, // High 35, 0x23
			0b11111111_11111111_11111111_11111111_11100000_00000000_00000000_00000000, // High 36, 0x24
			0b11111111_11111111_11111111_11111111_11110000_00000000_00000000_00000000, // High 37, 0x25
			0b11111111_11111111_11111111_11111111_11111000_00000000_00000000_00000000, // High 38, 0x26
			0b11111111_11111111_11111111_11111111_11111100_00000000_00000000_00000000, // High 39, 0x27
			0b11111111_11111111_11111111_11111111_11111110_00000000_00000000_00000000, // High 40, 0x28
			0b11111111_11111111_11111111_11111111_11111111_00000000_00000000_00000000, // High 41, 0x29
			0b11111111_11111111_11111111_11111111_11111111_10000000_00000000_00000000, // High 42, 0x2a
			0b11111111_11111111_11111111_11111111_11111111_11000000_00000000_00000000, // High 43, 0x2b
			0b11111111_11111111_11111111_11111111_11111111_11100000_00000000_00000000, // High 44, 0x2c
			0b11111111_11111111_11111111_11111111_11111111_11110000_00000000_00000000, // High 45, 0x2d
			0b11111111_11111111_11111111_11111111_11111111_11111000_00000000_00000000, // High 46, 0x2e
			0b11111111_11111111_11111111_11111111_11111111_11111100_00000000_00000000, // High 47, 0x2f
			0b11111111_11111111_11111111_11111111_11111111_11111110_00000000_00000000, // High 48, 0x30
			0b11111111_11111111_11111111_11111111_11111111_11111111_00000000_00000000, // High 49, 0x31
			0b11111111_11111111_11111111_11111111_11111111_11111111_10000000_00000000, // High 50, 0x32
			0b11111111_11111111_11111111_11111111_11111111_11111111_11000000_00000000, // High 51, 0x33
			0b11111111_11111111_11111111_11111111_11111111_11111111_11100000_00000000, // High 52, 0x34
			0b11111111_11111111_11111111_11111111_11111111_11111111_11110000_00000000, // High 53, 0x35
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111000_00000000, // High 54, 0x36
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111100_00000000, // High 55, 0x37
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111110_00000000, // High 56, 0x38
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_00000000, // High 57, 0x39
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_10000000, // High 58, 0x3a
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11000000, // High 59, 0x3b
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11100000, // High 60, 0x3c
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11110000, // High 61, 0x3d
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111000, // High 62, 0x3e
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111100, // High 63, 0x3f
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111110 // High 64, 0x40
		};

        /// <summary>
        /// Used to get the bottom ith bits
        /// </summary>
        private readonly ulong[] dataMaskLow = {
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000, //  Low 0, 0x0
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001, // Low 1, 0x1
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000011, // Low 2, 0x2
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000111, // Low 3, 0x3
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001111, // Low 4, 0x4
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00011111, // Low 5, 0x5
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00111111, // Low 6, 0x6
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_01111111, // Low 7, 0x7
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_11111111, // Low 8, 0x8
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000001_11111111, // Low 9, 0x9
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000011_11111111, // Low 10, 0xa
			0b00000000_00000000_00000000_00000000_00000000_00000000_00000111_11111111, // Low 11, 0xb
			0b00000000_00000000_00000000_00000000_00000000_00000000_00001111_11111111, // Low 12, 0xc
			0b00000000_00000000_00000000_00000000_00000000_00000000_00011111_11111111, // Low 13, 0xd
			0b00000000_00000000_00000000_00000000_00000000_00000000_00111111_11111111, // Low 14, 0xe
			0b00000000_00000000_00000000_00000000_00000000_00000000_01111111_11111111, // Low 15, 0xf
			0b00000000_00000000_00000000_00000000_00000000_00000000_11111111_11111111, // Low 16, 0x10
			0b00000000_00000000_00000000_00000000_00000000_00000001_11111111_11111111, // Low 17, 0x11
			0b00000000_00000000_00000000_00000000_00000000_00000011_11111111_11111111, // Low 18, 0x12
			0b00000000_00000000_00000000_00000000_00000000_00000111_11111111_11111111, // Low 19, 0x13
			0b00000000_00000000_00000000_00000000_00000000_00001111_11111111_11111111, // Low 20, 0x14
			0b00000000_00000000_00000000_00000000_00000000_00011111_11111111_11111111, // Low 21, 0x15
			0b00000000_00000000_00000000_00000000_00000000_00111111_11111111_11111111, // Low 22, 0x16
			0b00000000_00000000_00000000_00000000_00000000_01111111_11111111_11111111, // Low 23, 0x17
			0b00000000_00000000_00000000_00000000_00000000_11111111_11111111_11111111, // Low 24, 0x18
			0b00000000_00000000_00000000_00000000_00000001_11111111_11111111_11111111, // Low 25, 0x19
			0b00000000_00000000_00000000_00000000_00000011_11111111_11111111_11111111, // Low 26, 0x1a
			0b00000000_00000000_00000000_00000000_00000111_11111111_11111111_11111111, // Low 27, 0x1b
			0b00000000_00000000_00000000_00000000_00001111_11111111_11111111_11111111, // Low 28, 0x1c
			0b00000000_00000000_00000000_00000000_00011111_11111111_11111111_11111111, // Low 29, 0x1d
			0b00000000_00000000_00000000_00000000_00111111_11111111_11111111_11111111, // Low 30, 0x1e
			0b00000000_00000000_00000000_00000000_01111111_11111111_11111111_11111111, // Low 31, 0x1f
			0b00000000_00000000_00000000_00000000_11111111_11111111_11111111_11111111, // Low 32, 0x20
			0b00000000_00000000_00000000_00000001_11111111_11111111_11111111_11111111, // Low 33, 0x21
			0b00000000_00000000_00000000_00000011_11111111_11111111_11111111_11111111, // Low 34, 0x22
			0b00000000_00000000_00000000_00000111_11111111_11111111_11111111_11111111, // Low 35, 0x23
			0b00000000_00000000_00000000_00001111_11111111_11111111_11111111_11111111, // Low 36, 0x24
			0b00000000_00000000_00000000_00011111_11111111_11111111_11111111_11111111, // Low 37, 0x25
			0b00000000_00000000_00000000_00111111_11111111_11111111_11111111_11111111, // Low 38, 0x26
			0b00000000_00000000_00000000_01111111_11111111_11111111_11111111_11111111, // Low 39, 0x27
			0b00000000_00000000_00000000_11111111_11111111_11111111_11111111_11111111, // Low 40, 0x28
			0b00000000_00000000_00000001_11111111_11111111_11111111_11111111_11111111, // Low 41, 0x29
			0b00000000_00000000_00000011_11111111_11111111_11111111_11111111_11111111, // Low 42, 0x2a
			0b00000000_00000000_00000111_11111111_11111111_11111111_11111111_11111111, // Low 43, 0x2b
			0b00000000_00000000_00001111_11111111_11111111_11111111_11111111_11111111, // Low 44, 0x2c
			0b00000000_00000000_00011111_11111111_11111111_11111111_11111111_11111111, // Low 45, 0x2d
			0b00000000_00000000_00111111_11111111_11111111_11111111_11111111_11111111, // Low 46, 0x2e
			0b00000000_00000000_01111111_11111111_11111111_11111111_11111111_11111111, // Low 47, 0x2f
			0b00000000_00000000_11111111_11111111_11111111_11111111_11111111_11111111, // Low 48, 0x30
			0b00000000_00000001_11111111_11111111_11111111_11111111_11111111_11111111, // Low 49, 0x31
			0b00000000_00000011_11111111_11111111_11111111_11111111_11111111_11111111, // Low 50, 0x32
			0b00000000_00000111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 51, 0x33
			0b00000000_00001111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 52, 0x34
			0b00000000_00011111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 53, 0x35
			0b00000000_00111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 54, 0x36
			0b00000000_01111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 55, 0x37
			0b00000000_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 56, 0x38
			0b00000001_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 57, 0x39
			0b00000011_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 58, 0x3a
			0b00000111_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 59, 0x3b
			0b00001111_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 60, 0x3c
			0b00011111_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 61, 0x3d
			0b00111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 62, 0x3e
			0b01111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111, // Low 63, 0x3f
			0b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111 // Low 64, 0x40
		};

        protected byte TOTAL_BITMASK_LENGTH = 64;
        public ulong getDataMask(byte bits, bool high)
        {
            if (bits > TOTAL_BITMASK_LENGTH) bits = TOTAL_BITMASK_LENGTH;
            if (high) return dataMaskHigh[bits];
            return dataMaskLow[bits];
        }

        public ulong getBitMask(byte bit)
        {
			if (bit == 0) return 0;
			if (bit > TOTAL_BITMASK_LENGTH) bit = TOTAL_BITMASK_LENGTH;
			return (ulong)1 << bit - 1;
        }
    }
}
