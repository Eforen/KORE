<?xml version="1.0" encoding="UTF-8"?>
<TestRun xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010" name="@">
  <Times creation="2025-06-20T01:17:16.8814099-05:00" queuing="2025-06-20T01:17:16.8814100-05:00" start="2025-06-20T01:17:15.0068296-05:00" finish="2025-06-20T01:17:24.1197715-05:00"/>
  <TestSettings name="default">
    <Deployment runDeploymentRoot="testrun"/>
  </TestSettings>
  <Results>
    <UnitTestResult testName="InlineDirectives(&quot;hi&quot;,HI,&quot;lo&quot;,LO,&quot;myVar&quot;)" outcome="Passed"/>
    <UnitTestResult testName="InlineDirectives(&quot;pcrel_hi&quot;,PCREL_HI,&quot;pcrel_lo&quot;,PCREL_LO,&quot;myVar&quot;)" outcome="Passed"/>
    <UnitTestResult testName="MachineCode(&quot;.text\n    li      a5,0      # should result in 0x00000793u\n    lui     a0,10     # should result in 0x00010537u\n    ret               # should result in 0x00008067u\n    auipc   gp,0x2    # should result in 0x00002197u\n    sub     a2,a2,a0  # should result in 0x40a60633u\n    li      a1,0      # should result in 0x00000593u\n    auipc   a0,0      # should result in 0x00000517u\n    lw      a0,0(sp)  # should result in 0x00012503u\n    addi    a1,sp,8   # should result in 0x00810593u\n    li      a2,0      # should result in 0x00000613u\n    addi    sp,sp,-16 # should result in 0xff010113u\n    sd      s0,0(sp)  # should result in 0x00813023u\n&quot;,[1939, 66871, 32871, 8599, 1084622387, ...])" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 4. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Assembler.CodeGeneratorTests.MachineCode(String asm, UInt32[] data) in src/Kore.Kuick.Tests/Assembler/CodeGeneratorTests.cs:line 40
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;beqz x1, 0x00000003&quot;,&quot;beq x1, x0, 0x00000003&quot;,&quot;Branch if equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;beqz x2, 0x00000002&quot;,&quot;beq x2, x0, 0x00000002&quot;,&quot;Branch if equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;beqz x3, 0x00000001&quot;,&quot;beq x3, x0, 0x00000001&quot;,&quot;Branch if equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bgez x1, 0x00000003&quot;,&quot;bge x1, x0, 0x00000003&quot;,&quot;Branch if greater than or equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bgez x2, 0x00000002&quot;,&quot;bge x2, x0, 0x00000002&quot;,&quot;Branch if greater than or equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bgez x3, 0x00000001&quot;,&quot;bge x3, x0, 0x00000001&quot;,&quot;Branch if greater than or equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bgtz x1, 0x00000003&quot;,&quot;blt x0, x1, 0x00000003&quot;,&quot;Branch if greater than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bgtz x2, 0x00000002&quot;,&quot;blt x0, x2, 0x00000002&quot;,&quot;Branch if greater than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;blez x1, 0x00000003&quot;,&quot;bge x0, x1, 0x00000003&quot;,&quot;Branch if less than or equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;blez x2, 0x00000002&quot;,&quot;bge x0, x2, 0x00000002&quot;,&quot;Branch if less than or equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;blez x3, 0x00000001&quot;,&quot;bge x0, x3, 0x00000001&quot;,&quot;Branch if less than or equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bltz x1, 0x00000003&quot;,&quot;blt x1, x0, 0x00000003&quot;,&quot;Branch if less than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bltz x2, 0x00000002&quot;,&quot;blt x2, x0, 0x00000002&quot;,&quot;Branch if less than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bltz x3, 0x00000001&quot;,&quot;blt x3, x0, 0x00000001&quot;,&quot;Branch if less than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bnez x1, 0x00000003&quot;,&quot;bne x1, x0, 0x00000003&quot;,&quot;Branch if not equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bnez x2, 0x00000002&quot;,&quot;bne x2, x0, 0x00000002&quot;,&quot;Branch if not equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;bnez x3, 0x00000001&quot;,&quot;bne x3, x0, 0x00000001&quot;,&quot;Branch if not equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrc 0x7C0, x1&quot;,&quot;csrrc x0, 0x7C0, x1&quot;,&quot;Clear custom CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrc cycle, x3&quot;,&quot;csrrc x0, cycle, x3&quot;,&quot;Clear cycle count CSR&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  String lengths are both 117. Strings differ at index 72.
  Expected: "...      TypeI csrrs RD:zero RS:x3 IMM:3072\n          }\n      }\n"
  But was:  "...      TypeI csrrc RD:zero RS:x3 IMM:3072\n          }\n      }\n"
  ------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;csrc instret, x2&quot;,&quot;csrrc x0, instret, x2&quot;,&quot;Clear instruction count CSR&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  String lengths are both 117. Strings differ at index 72.
  Expected: "...      TypeI csrrs RD:zero RS:x2 IMM:3074\n          }\n      }\n"
  But was:  "...      TypeI csrrc RD:zero RS:x2 IMM:3074\n          }\n      }\n"
  ------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;csrc time, x4&quot;,&quot;csrrc x0, time, x4&quot;,&quot;Clear time CSR&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  String lengths are both 117. Strings differ at index 72.
  Expected: "...      TypeI csrrs RD:zero RS:tp IMM:3073\n          }\n      }\n"
  But was:  "...      TypeI csrrc RD:zero RS:tp IMM:3073\n          }\n      }\n"
  ------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;csrci 0x7C0, 0x1&quot;,&quot;csrrci x0, 0x7C0, 0x1&quot;,&quot;Clear custom CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrci cycle, 0x3&quot;,&quot;csrrci x0, cycle, 0x3&quot;,&quot;Clear cycle count CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrci instret, 0x2&quot;,&quot;csrrci x0, instret, 0x2&quot;,&quot;Clear instruction count CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrci time, 0x4&quot;,&quot;csrrci x0, time, 0x4&quot;,&quot;Clear time CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x1, 0x7C0&quot;,&quot;csrrs x1, 0x7C0, x0&quot;,&quot;Read custom CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x2, instret&quot;,&quot;csrrs x2, instret, x0&quot;,&quot;Read instruction count CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x3, cycle&quot;,&quot;csrrs x3, cycle, x0&quot;,&quot;Read cycle count CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x4, time&quot;,&quot;csrrs x4, time, x0&quot;,&quot;Read time CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x5, 0x7C1&quot;,&quot;csrrs x5, 0x7C1, x0&quot;,&quot;Read custom CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x6, instreth&quot;,&quot;csrrs x6, instreth, x0&quot;,&quot;Read instruction count CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x7, cycleh&quot;,&quot;csrrs x7, cycleh, x0&quot;,&quot;Read cycle count CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrr x8, timeh&quot;,&quot;csrrs x8, timeh, x0&quot;,&quot;Read time CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrs 0x7C0, x5&quot;,&quot;csrrs x0, 0x7C0, x5&quot;,&quot;Set custom CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrs cycle, x7&quot;,&quot;csrrs x0, cycle, x7&quot;,&quot;Set cycle count CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrs instret, x6&quot;,&quot;csrrs x0, instret, x6&quot;,&quot;Set instruction count CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrs time, x8&quot;,&quot;csrrs x0, time, x8&quot;,&quot;Set time CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrsi 0x7C0, 0x5&quot;,&quot;csrrsi x0, 0x7C0, 0x5&quot;,&quot;Set custom CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrsi cycle, 0x7&quot;,&quot;csrrsi x0, cycle, 0x7&quot;,&quot;Set cycle count CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrsi instret, 0x6&quot;,&quot;csrrsi x0, instret, 0x6&quot;,&quot;Set instruction count CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrsi time, 0x8&quot;,&quot;csrrsi x0, time, 0x8&quot;,&quot;Set time CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrw 0x7C0, x1&quot;,&quot;csrrw x0, 0x7C0, x1&quot;,&quot;Write custom CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrw cycle, x3&quot;,&quot;csrrw x0, cycle, x3&quot;,&quot;Write cycle count CSR&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  String lengths are both 117. Strings differ at index 72.
  Expected: "...      TypeI csrrs RD:zero RS:x3 IMM:3072\n          }\n      }\n"
  But was:  "...      TypeI csrrw RD:zero RS:x3 IMM:3072\n          }\n      }\n"
  ------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;csrw instret, x2&quot;,&quot;csrrw x0, instret, x2&quot;,&quot;Write instruction count CSR&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  String lengths are both 117. Strings differ at index 72.
  Expected: "...      TypeI csrrs RD:zero RS:x2 IMM:3074\n          }\n      }\n"
  But was:  "...      TypeI csrrw RD:zero RS:x2 IMM:3074\n          }\n      }\n"
  ------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;csrw time, x4&quot;,&quot;csrrw x0, time, x4&quot;,&quot;Write time CSR&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  String lengths are both 117. Strings differ at index 72.
  Expected: "...      TypeI csrrs RD:zero RS:tp IMM:3073\n          }\n      }\n"
  But was:  "...      TypeI csrrw RD:zero RS:tp IMM:3073\n          }\n      }\n"
  ------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;csrwi 0x7C0, 0x1&quot;,&quot;csrrwi x0, 0x7C0, 0x1&quot;,&quot;Write custom CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrwi cycle, 0x3&quot;,&quot;csrrwi x0, cycle, 0x3&quot;,&quot;Write cycle count CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrwi instret, 0x2&quot;,&quot;csrrwi x0, instret, 0x2&quot;,&quot;Write instruction count CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;csrwi time, 0x4&quot;,&quot;csrrwi x0, time, 0x4&quot;,&quot;Write time CSR (immediate)&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;fld f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fld f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load doubleword&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 175
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fld f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fld f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load doubleword&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 175
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fld f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfld f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load doubleword&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 175
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;flw f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   flw f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load word&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 175
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;flw f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  flw f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load word&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 175
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;flw f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nflw f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load word&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 175
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;frcsr x1&quot;,&quot;csrrs x1, fcsr, x0&quot;,&quot;Read floating point control/status register&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;frflags x5&quot;,&quot;csrrs x5, fflags, x0&quot;,&quot;Read floating point flags CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;frrm x3&quot;,&quot;csrrs x3, frm, x0&quot;,&quot;Read floating point rounding mode CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;fscsr x2&quot;,&quot;csrrs x0, fcsr, x2&quot;,&quot;Set floating point control/status register&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;fsd f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fsd f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Store doubleword&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 86
   at Kore.Kuick.Parser.ParseSInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 235
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fsd f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fsd f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Store doubleword&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 86
   at Kore.Kuick.Parser.ParseSInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 235
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fsd f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfsd f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Store doubleword&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 86
   at Kore.Kuick.Parser.ParseSInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 235
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fsflags x6&quot;,&quot;csrrs x0, fflags, x6&quot;,&quot;Set floating point flags CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;fsrm x4&quot;,&quot;csrrs x0, frm, x4&quot;,&quot;Set floating point rounding mode CSR&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;fsw f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fsw f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Store word&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 86
   at Kore.Kuick.Parser.ParseSInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 235
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fsw f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fsw f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Store word&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 86
   at Kore.Kuick.Parser.ParseSInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 235
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;fsw f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfsw f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Store word&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token REGISTER at line 1, column 4. Expected Register.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnexpected(TokenData currentToken, String expectation) in src/Kore.Kuick/Parser/Parser.cs:line 16
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 86
   at Kore.Kuick.Parser.ParseSInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 235
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;j 0x16&quot;,&quot;jal x0, 0x8&quot;,&quot;Jump 16 bytes&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected string length 106 but was 105. Strings differ at index 84.
  Expected: "...]{\n              TypeJ jal RD:zero IMM:22          }\n      }\n"
  But was:  "...]{\n              TypeJ jal RD:zero IMM:8          }\n      }\n"
  ------------------------------------------------------^
</Message>
          <StackTrace>   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;j 0x8&quot;,&quot;jal x0, 0x8&quot;,&quot;Jump 8 bytes&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;jr x1&quot;,&quot;jalr x0, 0(x1)&quot;,&quot;Jump register&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token NUMBER_INT(0) at line 1, column 9. Expected REGISTER.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ExpectToken(Lexer lexer, Token expectation, Boolean ignoreWhitespace) in src/Kore.Kuick/Parser/Parser.cs:line 36
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 84
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 221
   at Kore.Kuick.Parser.ParseInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 351
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;jr x7&quot;,&quot;jalr x0, 0(x7)&quot;,&quot;Jump register&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token NUMBER_INT(0) at line 1, column 9. Expected REGISTER.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ExpectToken(Lexer lexer, Token expectation, Boolean ignoreWhitespace) in src/Kore.Kuick/Parser/Parser.cs:line 36
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 84
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 221
   at Kore.Kuick.Parser.ParseInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 351
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;la x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   addi x1, x1, %pcrel_lo(myVar)&quot;,&quot;Load address into x1&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;la x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  addi x2, x2, %pcrel_lo(myVar1)&quot;,&quot;Load address into x2&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;la x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\naddi x3, x3, %pcrel_lo(myVar152)&quot;,&quot;Load address into x3&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;lb x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lb x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lb x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lb x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lb x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlb x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;ld x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   ld x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load doubleword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;ld x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  ld x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load doubleword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;ld x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nld x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load doubleword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lh x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lh x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load halfword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lh x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lh x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load halfword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lh x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlh x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load halfword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;li x1, 0&quot;,&quot;addi x1, x0, 0&quot;,&quot;Load immediate&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;li x2, 5&quot;,&quot;addi x2, x0, 5&quot;,&quot;Load immediate&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;li x3, 2047&quot;,&quot;addi x3, x0, 2047&quot;,&quot;Load immediate&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;lla x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\naddi x1, x1, %pcrel_lo(myVar)&quot;,&quot;Load address into x1&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;lla x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\naddi x2, x2, %pcrel_lo(myVar1)&quot;,&quot;Load address into x2&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;lla x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\naddi x3, x3, %pcrel_lo(myVar152)&quot;,&quot;Load address into x3&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;lw x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lw x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lw x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lw x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;lw x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlw x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;neg x1, x2&quot;,&quot;sub x1, x0, x2&quot;,&quot;Two's complement negation&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;neg x2, x1&quot;,&quot;sub x2, x0, x1&quot;,&quot;Two's complement negation&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;neg x3, x3&quot;,&quot;sub x3, x0, x3&quot;,&quot;Two's complement negation&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;nop&quot;,&quot;addi x0, x0, 0&quot;,&quot;No operation&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdcycle x1&quot;,&quot;csrrs x1, cycle, x0&quot;,&quot;Read cycle count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdcycle x2&quot;,&quot;csrrs x2, cycle, x0&quot;,&quot;Read cycle count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdcycle x3&quot;,&quot;csrrs x3, cycle, x0&quot;,&quot;Read cycle count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdcycleh x1&quot;,&quot;csrrs x1, cycleh, x0&quot;,&quot;Read cycle count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdcycleh x2&quot;,&quot;csrrs x2, cycleh, x0&quot;,&quot;Read cycle count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdcycleh x3&quot;,&quot;csrrs x3, cycleh, x0&quot;,&quot;Read cycle count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdinstret x1&quot;,&quot;csrrs x1, instret, x0&quot;,&quot;Read instruction count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdinstret x2&quot;,&quot;csrrs x2, instret, x0&quot;,&quot;Read instruction count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdinstret x3&quot;,&quot;csrrs x3, instret, x0&quot;,&quot;Read instruction count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdinstreth x1&quot;,&quot;csrrs x1, instreth, x0&quot;,&quot;Read instruction count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdinstreth x2&quot;,&quot;csrrs x2, instreth, x0&quot;,&quot;Read instruction count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdinstreth x3&quot;,&quot;csrrs x3, instreth, x0&quot;,&quot;Read instruction count&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdtime x1&quot;,&quot;csrrs x1, time, x0&quot;,&quot;Read time&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdtime x2&quot;,&quot;csrrs x2, time, x0&quot;,&quot;Read time&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdtime x3&quot;,&quot;csrrs x3, time, x0&quot;,&quot;Read time&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdtimeh x1&quot;,&quot;csrrs x1, timeh, x0&quot;,&quot;Read time&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdtimeh x2&quot;,&quot;csrrs x2, timeh, x0&quot;,&quot;Read time&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;rdtimeh x3&quot;,&quot;csrrs x3, timeh, x0&quot;,&quot;Read time&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;ret&quot;,&quot;jalr x0, 0(x1)&quot;,&quot;Return from subroutine&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token NUMBER_INT(0) at line 1, column 9. Expected REGISTER.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ExpectToken(Lexer lexer, Token expectation, Boolean ignoreWhitespace) in src/Kore.Kuick/Parser/Parser.cs:line 36
   at Kore.Kuick.Parser.ParseRegister(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 84
   at Kore.Kuick.Parser.ParseIInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 221
   at Kore.Kuick.Parser.ParseInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 351
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 722
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;sb x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sb x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sb x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sb x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sb x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsb x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sd x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sd x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store doubleword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sd x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sd x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store doubleword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sd x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsd x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store doubleword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sgtz x1, x2&quot;,&quot;slt x1, x0, x2&quot;,&quot;Set if greater than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sgtz x2, x1&quot;,&quot;slt x2, x0, x1&quot;,&quot;Set if greater than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sgtz x3, x3&quot;,&quot;slt x3, x0, x3&quot;,&quot;Set if greater than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sh x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sh x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store halfword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sh x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sh x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store halfword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sh x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsh x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store halfword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sltz x1, x2&quot;,&quot;slt x1, x2, x0&quot;,&quot;Set if less than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sltz x2, x1&quot;,&quot;slt x2, x1, x0&quot;,&quot;Set if less than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sltz x3, x3&quot;,&quot;slt x3, x3, x0&quot;,&quot;Set if less than zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;snez x1, x2&quot;,&quot;sltu x1, x0, x2&quot;,&quot;Set if not equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;snez x2, x1&quot;,&quot;sltu x2, x0, x1&quot;,&quot;Set if not equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;snez x3, x3&quot;,&quot;sltu x3, x0, x3&quot;,&quot;Set if not equal zero&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sw x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sw x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sw x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sw x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;sw x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsw x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="PseudoInstructions(&quot;tail 0x4262fb3f&quot;,&quot;auipc x6, 0x4262f000\n    jal x0, 0xb3f&quot;,&quot;Tail call arr-away subroutine&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;tail 0x74543765&quot;,&quot;auipc x6, 0x74543000\n    jal x0, 0x765&quot;,&quot;Tail call arr-away subroutine&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="PseudoInstructions(&quot;tail 0x81C45C2C&quot;,&quot;auipc x6, 0x81C45000\n    jal x0, 0xC2C&quot;,&quot;Tail call arr-away subroutine&quot;)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>Kore.Kuick.Parser+SyntaxException : Unexpected token OP_PSEUDO at line 1, column 0. Operation Not implimented.</Message>
          <StackTrace>   at Kore.Kuick.Parser.ThrowUnimplemented(TokenData currentToken) in src/Kore.Kuick/Parser/Parser.cs:line 19
   at Kore.Kuick.Parser.ParsePseudoInstruction(TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 481
   at Kore.Kuick.Parser.ParseNodeSection(SectionNode section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 725
   at Kore.Kuick.Parser.CreateSectionNode(String section, TokenData currentToken, Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 759
   at Kore.Kuick.Parser.Parse(Lexer lexer) in src/Kore.Kuick/Parser/Parser.cs:line 896
   at Kore.Kuick.Tests.Parser.TestPsudoInstructions.PseudoInstructions(String pseudoInstruction, String trueInstruction, String description) in src/Kore.Kuick.Tests/Parser/TestPsudoInstructions.cs:line 206
   at InvokeStub_TestPsudoInstructions.PseudoInstructions(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="TestParseAddAndSubInstructions" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddInstruction" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(addi,&quot;.text\naddi x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(addi,&quot;.text\naddi x1, x0, 1&quot;,x1,zero,1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(addi,&quot;.text\naddi x2, x0, -1&quot;,x2,zero,-1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(addi,&quot;.text\naddi x3, x0, 0x7f&quot;,x3,zero,127)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(addi,&quot;.text\naddi x4, x0, 0x80&quot;,tp,zero,128)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(andi,&quot;.text\nandi x1, x0, -1&quot;,x1,zero,-1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(andi,&quot;.text\nandi x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(andi,&quot;.text\nandi x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0(x0)&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x7f(x0)&quot;,x1,zero,127)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x7ff(x0)&quot;,x1,zero,2047)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x80(x0)&quot;,x1,zero,128)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ori,&quot;.text\nori x1, x0, -1&quot;,x1,zero,-1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ori,&quot;.text\nori x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(ori,&quot;.text\nori x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slli,&quot;.text\nslli x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slli,&quot;.text\nslli x1, x0, 5&quot;,x1,zero,5)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slli,&quot;.text\nslli x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slti,&quot;.text\nslti x1, x0, -1&quot;,x1,zero,-1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slti,&quot;.text\nslti x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slti,&quot;.text\nslti x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slti,&quot;.text\nslti x4, x5, 0xff&quot;,tp,x5,255)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(slti,&quot;.text\nslti x5, x6, 0x100&quot;,x5,t1,256)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x1, x0, -1&quot;,x1,zero,-1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(srli,&quot;.text\nsrli x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(srli,&quot;.text\nsrli x1, x0, 5&quot;,x1,zero,5)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(srli,&quot;.text\nsrli x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(xori,&quot;.text\nxori x1, x0, -1&quot;,x1,zero,-1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(xori,&quot;.text\nxori x1, x0, 0&quot;,x1,zero,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiInstruction(xori,&quot;.text\nxori x2, x3, 10&quot;,x2,x3,10)" outcome="Passed"/>
    <UnitTestResult testName="TestParseAddiMultiInstruction" outcome="Passed"/>
    <UnitTestResult testName="TestParseBImmInstruction(bne,&quot;.text\nbne x1, x2, 0&quot;,x1,x2,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBImmInstruction(bne,&quot;.text\nbne x2, x3, 4&quot;,x2,x3,4)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBImmInstruction(bne,&quot;.text\nbne x3, x4, -8&quot;,x3,tp,-8)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(beq,&quot;.text\nbeq x1, x2, label&quot;,x1,x2,&quot;label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(beq,&quot;.text\nbeq x2, x3, other_label&quot;,x2,x3,&quot;other_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bge,&quot;.text\nbge x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bge,&quot;.text\nbge x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bge,&quot;.text\nbge x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(blt,&quot;.text\nblt x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(blt,&quot;.text\nblt x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(blt,&quot;.text\nblt x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeImmInstruction(jal,&quot;.text\njal x1, 0x50&quot;,x1,80)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeImmInstruction(jal,&quot;.text\njal x1, 5&quot;,x1,5)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeImmInstruction(jal,&quot;.text\njal x2, 0&quot;,x2,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeImmInstruction(jal,&quot;.text\njal x3, -8&quot;,x3,-8)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x1, some_label&quot;,x1,&quot;some_label&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x2, some_label2&quot;,x2,&quot;some_label2&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x3, some_label5&quot;,x3,&quot;some_label5&quot;)" outcome="Passed"/>
    <UnitTestResult testName="TestParseRInstruction(add,x1,x2,x3)" outcome="Passed"/>
    <UnitTestResult testName="TestParseRInstruction(and,t2,fp,s1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseRInstruction(or,a0,a1,x12)" outcome="Passed"/>
    <UnitTestResult testName="TestParseRInstruction(sub,tp,x5,t1)" outcome="Passed"/>
    <UnitTestResult testName="TestParseSbInstruction" outcome="Passed"/>
    <UnitTestResult testName="TestParseShInstruction" outcome="Passed"/>
    <UnitTestResult testName="TestParseSubInstruction" outcome="Passed"/>
    <UnitTestResult testName="TestParseSwInstruction" outcome="Passed"/>
    <UnitTestResult testName="TestParseUTypeInstruction(auipc,&quot;.text\nauipc x1, 0&quot;,x1,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseUTypeInstruction(auipc,&quot;.text\nauipc x1, 0x52345&quot;,x1,336709)" outcome="Passed"/>
    <UnitTestResult testName="TestParseUTypeInstruction(lui,&quot;.text\nlui x1, 0&quot;,x1,0)" outcome="Passed"/>
    <UnitTestResult testName="TestParseUTypeInstruction(lui,&quot;.text\nlui x1, 0x12345&quot;,x1,74565)" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;     .text&quot;,[WHITESPACE, DIRECTIVE, EOF, EOF, EOF],[&quot;     &quot;, &quot;.text&quot;, null, null, null])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.byte&quot;, &quot; &quot;, &quot;0xFF&quot;, &quot;, &quot;, &quot;0xf2&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.byte&quot;, &quot; &quot;, &quot;0xFF&quot;, &quot;, &quot;, &quot;0xf2&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.double 0.1d, 4.5d, 2.4d, 2414.125125d&quot;,[DIRECTIVE, WHITESPACE, NUMBER_DOUBLE, WHITESPACE, NUMBER_DOUBLE, ...],[&quot;.double&quot;, &quot; &quot;, &quot;0.1d&quot;, &quot;, &quot;, &quot;4.5d&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.dword 0xFAB3EA2363424253, 0x634242532535A244&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.dword&quot;, &quot; &quot;, &quot;0xFAB3EA2363424253&quot;, &quot;, &quot;, &quot;0x634242532535A244&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.float 0.1f, 42.2f, 151326.52562f&quot;,[DIRECTIVE, WHITESPACE, NUMBER_FLOAT, WHITESPACE, NUMBER_FLOAT, ...],[&quot;.float&quot;, &quot; &quot;, &quot;0.1f&quot;, &quot;, &quot;, &quot;42.2f&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.half 0xFFf2, 0x0285, 0x0563&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.half&quot;, &quot; &quot;, &quot;0xFFf2&quot;, &quot;, &quot;, &quot;0x0285&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option nopic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;nopic&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option norelax&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;norelax&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option norvc&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;norvc&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option pic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;pic&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option push&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;push&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option relax&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;relax&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.option rvc&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;rvc&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.string \&quot;str\&quot;&quot;,[DIRECTIVE, WHITESPACE, STRING, EOF, EOF, ...],[&quot;.string&quot;, &quot; &quot;, &quot;\&quot;str\&quot;&quot;, null, null, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.text&quot;,[DIRECTIVE, EOF, EOF, EOF],[&quot;.text&quot;, null, null, null])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;.word 0xFAB3EA23, 0x63424253, 0x2535A244&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.word&quot;, &quot; &quot;, &quot;0xFAB3EA23&quot;, &quot;, &quot;, &quot;0x63424253&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;yolo&quot;,[IDENTIFIER, EOF, EOF, EOF],[&quot;yolo&quot;, null, null, null])" outcome="Passed"/>
    <UnitTestResult testName="fullReadToken(&quot;yolo:&quot;,[LABEL, EOF, EOF, EOF],[&quot;yolo&quot;, null, null, null])" outcome="Passed"/>
    <UnitTestResult testName="noWhiteSpaceReadTokens(&quot; sh x2, 0(x1)&quot;,[OP_S, REGISTER, NUMBER_INT, PARREN_OPEN, REGISTER, ...],[&quot;SH&quot;, &quot;x2&quot;, &quot;0&quot;, &quot;(&quot;, &quot;x1&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="noWhiteSpaceReadTokens(&quot; sh x2, 0x10(x1)&quot;,[OP_S, REGISTER, NUMBER_HEX, PARREN_OPEN, REGISTER, ...],[&quot;SH&quot;, &quot;x2&quot;, &quot;0x10&quot;, &quot;(&quot;, &quot;x1&quot;, ...])" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;     .text&quot;,WHITESPACE,&quot;     &quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%got(myVar)&quot;,INLINE_DIRECTIVE,&quot;got&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%got_pcrel(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%got_pcrel_hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel_hi&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%got_pcrel_lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel_lo&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;hi&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;lo&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%pcrel_hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;pcrel_hi&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;%pcrel_lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;pcrel_lo&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;, SLL&quot;,WHITESPACE,&quot;, &quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;-2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;-2.4d&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;-242&quot;,NUMBER_INT,&quot;-242&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;-42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;-42.2f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,DIRECTIVE,&quot;.byte&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.double 0.1d, 4.5d, 2.4d, 2414.125125d&quot;,DIRECTIVE,&quot;.double&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.dword 0xFAB3EA2363424253, 0x634242532535A244&quot;,DIRECTIVE,&quot;.dword&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.float 0.1f, 42.2f, 151326.52562f&quot;,DIRECTIVE,&quot;.float&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.half 0xFFf2, 0x0285, 0x0563&quot;,DIRECTIVE,&quot;.half&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option nopic&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option norelax&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option norvc&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option pic&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option push&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option relax&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.option rvc&quot;,DIRECTIVE,&quot;.option&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.string \&quot;str\&quot;&quot;,DIRECTIVE,&quot;.string&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.text&quot;,DIRECTIVE,&quot;.text&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;.word 0xFAB3EA23, 0x63424253, 0x2535A244&quot;,DIRECTIVE,&quot;.word&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0&quot;,NUMBER_INT,&quot;0&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0.0f&quot;,NUMBER_FLOAT,&quot;0.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0.1d, 4.5d, 2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;0.1d&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0.1f, 42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;0.1f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b0&quot;,NUMBER_BIN,&quot;0b0&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b1&quot;,NUMBER_BIN,&quot;0b1&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b10&quot;,NUMBER_BIN,&quot;0b10&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b100&quot;,NUMBER_BIN,&quot;0b100&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b1000&quot;,NUMBER_BIN,&quot;0b1000&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b1001&quot;,NUMBER_BIN,&quot;0b1001&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b101&quot;,NUMBER_BIN,&quot;0b101&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b11&quot;,NUMBER_BIN,&quot;0b11&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b110&quot;,NUMBER_BIN,&quot;0b110&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0b111&quot;,NUMBER_BIN,&quot;0b111&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x0&quot;,NUMBER_HEX,&quot;0x0&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0x02&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x05&quot;,NUMBER_HEX,&quot;0x05&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x1&quot;,NUMBER_HEX,&quot;0x1&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x10&quot;,NUMBER_HEX,&quot;0x10&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x11&quot;,NUMBER_HEX,&quot;0x11&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x2&quot;,NUMBER_HEX,&quot;0x2&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x3&quot;,NUMBER_HEX,&quot;0x3&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x4&quot;,NUMBER_HEX,&quot;0x4&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x5&quot;,NUMBER_HEX,&quot;0x5&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x6&quot;,NUMBER_HEX,&quot;0x6&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x7&quot;,NUMBER_HEX,&quot;0x7&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x8&quot;,NUMBER_HEX,&quot;0x8&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x85, 0x05&quot;,NUMBER_HEX,&quot;0x85&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0x9&quot;,NUMBER_HEX,&quot;0x9&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0xFF&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xa&quot;,NUMBER_HEX,&quot;0xa&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xb&quot;,NUMBER_HEX,&quot;0xb&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xc&quot;,NUMBER_HEX,&quot;0xc&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xd&quot;,NUMBER_HEX,&quot;0xd&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xe&quot;,NUMBER_HEX,&quot;0xe&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xf&quot;,NUMBER_HEX,&quot;0xf&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;0xf2, 0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0xf2&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;1&quot;,NUMBER_INT,&quot;1&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;1.0f&quot;,NUMBER_FLOAT,&quot;1.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;10&quot;,NUMBER_INT,&quot;10&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;10.0f&quot;,NUMBER_FLOAT,&quot;10.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;11&quot;,NUMBER_INT,&quot;11&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;11.0f&quot;,NUMBER_FLOAT,&quot;11.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;12&quot;,NUMBER_INT,&quot;12&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;12.0f&quot;,NUMBER_FLOAT,&quot;12.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;13&quot;,NUMBER_INT,&quot;13&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;13.0f&quot;,NUMBER_FLOAT,&quot;13.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;14&quot;,NUMBER_INT,&quot;14&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;14.0f&quot;,NUMBER_FLOAT,&quot;14.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;151326.52562f&quot;,NUMBER_FLOAT,&quot;151326.52562f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;2&quot;,NUMBER_INT,&quot;2&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;2.0f&quot;,NUMBER_FLOAT,&quot;2.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;2.4d&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;2414.125125d&quot;,NUMBER_DOUBLE,&quot;2414.125125d&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;242&quot;,NUMBER_INT,&quot;242&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;3&quot;,NUMBER_INT,&quot;3&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;3.0f&quot;,NUMBER_FLOAT,&quot;3.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;4&quot;,NUMBER_INT,&quot;4&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;4.0f&quot;,NUMBER_FLOAT,&quot;4.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;4.5d, 2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;4.5d&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;42.2f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;5&quot;,NUMBER_INT,&quot;5&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;5.0f&quot;,NUMBER_FLOAT,&quot;5.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;6&quot;,NUMBER_INT,&quot;6&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;6.0f&quot;,NUMBER_FLOAT,&quot;6.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;7&quot;,NUMBER_INT,&quot;7&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;7.0f&quot;,NUMBER_FLOAT,&quot;7.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;8&quot;,NUMBER_INT,&quot;8&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;8.0f&quot;,NUMBER_FLOAT,&quot;8.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;9&quot;,NUMBER_INT,&quot;9&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;9.0f&quot;,NUMBER_FLOAT,&quot;9.0f&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;SLL ,&quot;,OP_R,&quot;SLL&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;\&quot;str\&quot;&quot;,STRING,&quot;\&quot;str\&quot;&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a0&quot;,REGISTER,&quot;x10&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a00&quot;,REGISTER,&quot;x10&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a01&quot;,REGISTER,&quot;x11&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a02&quot;,REGISTER,&quot;x12&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a03&quot;,REGISTER,&quot;x13&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a04&quot;,REGISTER,&quot;x14&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a05&quot;,REGISTER,&quot;x15&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a06&quot;,REGISTER,&quot;x16&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a07&quot;,REGISTER,&quot;x17&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a1&quot;,REGISTER,&quot;x11&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a2&quot;,REGISTER,&quot;x12&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a3&quot;,REGISTER,&quot;x13&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a4&quot;,REGISTER,&quot;x14&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a5&quot;,REGISTER,&quot;x15&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a6&quot;,REGISTER,&quot;x16&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;a7&quot;,REGISTER,&quot;x17&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;fp&quot;,REGISTER,&quot;x8&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;gp&quot;,REGISTER,&quot;x3&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;nopic&quot;,IDENTIFIER,&quot;nopic&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;norelax&quot;,IDENTIFIER,&quot;norelax&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;norvc&quot;,IDENTIFIER,&quot;norvc&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;pic&quot;,IDENTIFIER,&quot;pic&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;push&quot;,IDENTIFIER,&quot;push&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;ra&quot;,REGISTER,&quot;x1&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;relax&quot;,IDENTIFIER,&quot;relax&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;rvc&quot;,IDENTIFIER,&quot;rvc&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s0&quot;,REGISTER,&quot;x8&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s01&quot;,REGISTER,&quot;x9&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s02&quot;,REGISTER,&quot;x18&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s03&quot;,REGISTER,&quot;x19&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s04&quot;,REGISTER,&quot;x20&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s05&quot;,REGISTER,&quot;x21&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s06&quot;,REGISTER,&quot;x22&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s07&quot;,REGISTER,&quot;x23&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s08&quot;,REGISTER,&quot;x24&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s09&quot;,REGISTER,&quot;x25&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s1&quot;,REGISTER,&quot;x9&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s10&quot;,REGISTER,&quot;x26&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s11&quot;,REGISTER,&quot;x27&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s2&quot;,REGISTER,&quot;x18&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s3&quot;,REGISTER,&quot;x19&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s4&quot;,REGISTER,&quot;x20&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s5&quot;,REGISTER,&quot;x21&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s6&quot;,REGISTER,&quot;x22&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s7&quot;,REGISTER,&quot;x23&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s8&quot;,REGISTER,&quot;x24&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;s9&quot;,REGISTER,&quot;x25&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;sp&quot;,REGISTER,&quot;x2&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t0&quot;,REGISTER,&quot;x5&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t03&quot;,REGISTER,&quot;x28&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t04&quot;,REGISTER,&quot;x29&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t05&quot;,REGISTER,&quot;x30&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t06&quot;,REGISTER,&quot;x31&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t1&quot;,REGISTER,&quot;x6&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t2&quot;,REGISTER,&quot;x7&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t3&quot;,REGISTER,&quot;x28&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t4&quot;,REGISTER,&quot;x29&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t5&quot;,REGISTER,&quot;x30&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;t6&quot;,REGISTER,&quot;x31&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;tp&quot;,REGISTER,&quot;x4&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x00&quot;,REGISTER,&quot;x0&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x01&quot;,REGISTER,&quot;x1&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x02&quot;,REGISTER,&quot;x2&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x03&quot;,REGISTER,&quot;x3&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x04&quot;,REGISTER,&quot;x4&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x05&quot;,REGISTER,&quot;x5&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x06&quot;,REGISTER,&quot;x6&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x07&quot;,REGISTER,&quot;x7&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x08&quot;,REGISTER,&quot;x8&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;x09&quot;,REGISTER,&quot;x9&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;yolo&quot;,IDENTIFIER,&quot;yolo&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;yolo:&quot;,LABEL,&quot;yolo&quot;)" outcome="Passed"/>
    <UnitTestResult testName="readToken(&quot;zero&quot;,REGISTER,&quot;x0&quot;)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ADD&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ADDI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ADDIW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ADDW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOADD&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOADD.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOADD.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOAND&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOAND.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOAND.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMAX&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMAX.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMAX.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMAXU.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMAXU.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMIN&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMIN.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMIN.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMINU.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOMINU.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOOR.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOOR.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOSWAP&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOSWAP.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOSWAP.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOXOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOXOR.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AMOXOR.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AND&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ANDI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;AUIPC&quot;,OP_U)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BEQ&quot;,OP_B)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BEQZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BGE&quot;,OP_B)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BGEU&quot;,OP_B)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BGEZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BGTZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BLEZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BLT&quot;,OP_B)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BLTU&quot;,OP_B)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BLTZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BNE&quot;,OP_B)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;BNEZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ADD&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ADDI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ADDI16SP&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ADDI4SPN&quot;,OP_CIW)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ADDIW&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ADDW&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.AND&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.ANDI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.BEQZ&quot;,OP_CB)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.BNEZ&quot;,OP_CB)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.EBRAKE&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FLD&quot;,OP_CL)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FLDSP&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FLW&quot;,OP_CL)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FLWSP&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FSD&quot;,OP_CS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FSDSP&quot;,OP_CSS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FSW&quot;,OP_CS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.FSWSP&quot;,OP_CSS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.J&quot;,OP_CJ)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.JAL&quot;,OP_CJ)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.JALR&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.JR&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.LD&quot;,OP_CL)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.LDSP&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.LI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.LUI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.LW&quot;,OP_CL)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.LWSP&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.MV&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.OR&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SD&quot;,OP_CS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SDSP&quot;,OP_CSS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SLLI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SRAI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SRLI&quot;,OP_CI)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SUB&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SUBW&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SW&quot;,OP_CS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.SWSP&quot;,OP_CSS)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;C.XOR&quot;,OP_CR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRCI&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRRC&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRRCI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRRS&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRRSI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRRW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRRWI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRSI&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;CSRWI&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;DIV&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;DIVU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;DIVW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;EBREAK&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ECALL&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FADD.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FADD.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCLASS.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCLASS.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.D.L&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.D.LU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.D.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.D.WU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.L.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.L.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.LU.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.LU.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.S.L&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.S.LU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.S.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.S.WU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.W.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.W.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.WU.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FCVT.WU.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FDIV.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FDIV.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FENCE&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FENCE.I&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FEQ.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FEQ.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FLD&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FLE.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FLE.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FLT.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FLT.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FLW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMADD.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMADD.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMAX.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMAX.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMIN.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMIN.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMSUB.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMSUB.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMUL.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMUL.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMV.D.X&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMV.W.X&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMV.X.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FMV.X.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FNMADD.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FNMADD.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FNMSUB.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FNMSUB.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FRCSR&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FRCSR&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FRFLAGS&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FRFLAGS&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FRRM&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FRRM&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSCSR&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSCSR&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSD&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSFLAGS&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSFLAGS&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSFLAGSI&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSGNJ.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSGNJ.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSGNJN.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSGNJN.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSGNJX.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSGNJX.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSQRT.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSQRT.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSRM&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSRM&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSRMI&quot;,OP_R)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_R
  But was:  OP_PSEUDO
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;FSUB.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSUB.S&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;FSW&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;J&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;JAL&quot;,OP_J)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;JALR&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;JR&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LA&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LB&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LB&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;LBU&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LD&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LD&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;LH&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LH&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;LHU&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LLA&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LR.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LR.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LUI&quot;,OP_U)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;LW&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;LWU&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;MRET&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;MUL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;MULH&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;MULHSU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;MULHU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;MULW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;NEG&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;NEGW&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;NOP&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;OR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ORI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;RDCYCLE[H]&quot;,OP_PSEUDO)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_PSEUDO
  But was:  IDENTIFIER
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;RDINSTRET[H]&quot;,OP_PSEUDO)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_PSEUDO
  But was:  IDENTIFIER
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;RDTIME[H]&quot;,OP_PSEUDO)" outcome="Failed">
      <Output>
        <ErrorInfo>
          <Message>  Expected: OP_PSEUDO
  But was:  IDENTIFIER
</Message>
          <StackTrace>   at Kore.Kuick.Tests.LexerTests.LexerTests.readToken(String test, Token token, String value) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 865
   at Kore.Kuick.Tests.LexerTests.LexerTests.sanityCheckOps(String test, Token token) in src/Kore.Kuick.Tests/Lexer/LexerTests.cs:line 654
   at InvokeStub_LexerTests.sanityCheckOps(Object, Span`1)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;REM&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;REMU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;REMUW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;REMW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;RET&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SB&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;SB&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SC.D&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SC.W&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SD&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;SD&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SETVL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SFENCE.VMA&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SGTZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SH&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;SH&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLLI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLLIW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLLW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLT&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLTI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLTIU&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLTU&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SLTZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SNEZ&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRA&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRAI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRAIW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRAW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRET&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRLI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRLIW&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SRLW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SUB&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SUBW&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;SW&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;SW&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;TAIL&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VADD&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VAND&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VCLASS&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VCVT&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VDIV&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VEXTRACT&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VFMADD&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VFMSUB&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VFNMADD&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VFNMSUB&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VLD&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VLDS&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VLDX&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VMAX&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VMERGE&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VMIN&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VMOV&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VMUL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VMULH&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPAND&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPANDN&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPEQ&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPGE&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPLT&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPNE&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPNOT&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPSWAP&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VPXOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VREM&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSELECT&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSETDCFG&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSGNJ&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSGNJN&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSGNJX&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSLL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSQRET&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSRA&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSRL&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VST&quot;,OP_S)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSTS&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSTX&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VSUB&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;VXOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;WFI&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;XOR&quot;,OP_R)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;XORI&quot;,OP_I)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;bgt&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;bgtu&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ble&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;bleu&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;bsatp&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;call&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;csrc&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;csrr&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;csrs&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;csrw&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;cycle&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;cycle&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;cycleh&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;cycleh&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;dcsr&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;dpc&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;dscratch0&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;dscratch1&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fabs.d&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fabs.s&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fcsr&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fence&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;fflags&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fld&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;flw&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;fmv.d&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fmv.s&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fneg.d&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fneg.s&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;frm&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;fscsr&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;fsd&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;fsflags&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;fsrm&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;fsw&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;hcause&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hcontext&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hcounteren&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hedeleg&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hgatp&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hgeip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hideleg&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hie&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter3&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter3&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter31&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter31&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter31h&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter31h&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter3h&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter3h&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter4&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter4&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter4h&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hpmcounter4h&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hstatus&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htegie&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htimedelta&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htimedeltah&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htinst&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htinst&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htval&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htval&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;htval2&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;hvip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;instret&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;instret&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;instreth&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;instreth&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;jal&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;jalr&quot;,OP_PSEUDO)" outcome="NotExecuted">
      <Output>
        <ErrorInfo>
          <Message>Duplicate Operation Name (Handeling in Parser)</Message>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult testName="sanityCheckOps(&quot;li&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;marchid&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mcontext&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mcounteren&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mcountinhibit&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;medeleg&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mepc&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mhartid&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mhpmevent3&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mhpmevent31&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mhpmevent4&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mideleg&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mie&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mimpid&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;misa&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mscratch&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mstatus&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mstatush&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mtvec&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mv&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;mvendorid&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;not&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpaddr0&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpaddr1&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpaddr63&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpcfg0&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpcfg1&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpcfg14&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpcfg15&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpcfg2&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;pmpcfg3&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;satp&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;scause&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;scontext&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;scounteren&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sedeleg&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sepc&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;seqz&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sext.w&quot;,OP_PSEUDO)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sideleg&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sie&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sscratch&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;sstatus&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;stval&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;stvec&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;tdata1&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;tdata2&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;tdata3&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;time&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;timeh&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;tselect&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ucause&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;uepc&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;uie&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;uip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;uscratch&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;ustatus&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;utval&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;utvec&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vscause&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vsepc&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vsie&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vsip&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vsscratch&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vsstatus&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vstval&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;vstvec&quot;,CSR)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x0&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x1&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x10&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x11&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x12&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x13&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x14&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x15&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x16&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x17&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x18&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x19&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x2&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x20&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x21&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x22&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x23&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x24&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x25&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x26&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x27&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x28&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x29&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x3&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x30&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x31&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x4&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x5&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x6&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x7&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x8&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="sanityCheckOps(&quot;x9&quot;,REGISTER)" outcome="Passed"/>
    <UnitTestResult testName="tokenPositions(&quot;.option push\n.option nopic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOL, DIRECTIVE, ...],[0, 0, 0, 0, 1, ...],[0, 7, 8, 12, 0, ...],[&quot;.option&quot;, &quot; &quot;, &quot;push&quot;, &quot;\n&quot;, &quot;.option&quot;, ...])" outcome="Passed"/>
    </Results>
  <TestDefinitions>
    <UnitTest name="sanityCheckOps(&quot;vsie&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vsie&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s10&quot;,REGISTER,&quot;x26&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s10&quot;,REGISTER,&quot;x26&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsd f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fsd f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Store doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsd f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fsd f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Store doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VMOV&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VMOV&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bltz x2, 0x00000002&quot;,&quot;blt x2, x0, 0x00000002&quot;,&quot;Branch if less than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bltz x2, 0x00000002&quot;,&quot;blt x2, x0, 0x00000002&quot;,&quot;Branch if less than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;8&quot;,NUMBER_INT,&quot;8&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;8&quot;,NUMBER_INT,&quot;8&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sh x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsh x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store halfword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sh x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsh x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store halfword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.LU.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.LU.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(addi,&quot;.text\naddi x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(addi,&quot;.text\naddi x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x11&quot;,NUMBER_HEX,&quot;0x11&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x11&quot;,NUMBER_HEX,&quot;0x11&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lla x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\naddi x1, x1, %pcrel_lo(myVar)&quot;,&quot;Load address into x1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lla x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\naddi x1, x1, %pcrel_lo(myVar)&quot;,&quot;Load address into x1&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x17&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x17&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x7&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x7&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;NOP&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;NOP&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpcfg15&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpcfg15&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%got_pcrel_hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel_hi&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%got_pcrel_hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel_hi&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%pcrel_lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;pcrel_lo&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%pcrel_lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;pcrel_lo&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SFENCE.VMA&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SFENCE.VMA&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLTU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLTU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLT&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLT&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;-2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;-2.4d&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;-2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;-2.4d&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;ld x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nld x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;ld x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nld x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FSW&quot;,OP_CS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FSW&quot;,OP_CS)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xb&quot;,NUMBER_HEX,&quot;0xb&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xb&quot;,NUMBER_HEX,&quot;0xb&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;jr x1&quot;,&quot;jalr x0, 0(x1)&quot;,&quot;Jump register&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;jr x1&quot;,&quot;jalr x0, 0(x1)&quot;,&quot;Jump register&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.BNEZ&quot;,OP_CB)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.BNEZ&quot;,OP_CB)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option pic&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option pic&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x3, some_label5&quot;,x3,&quot;some_label5&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x3, some_label5&quot;,x3,&quot;some_label5&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hideleg&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hideleg&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;4&quot;,NUMBER_INT,&quot;4&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;4&quot;,NUMBER_INT,&quot;4&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x9&quot;,NUMBER_HEX,&quot;0x9&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x9&quot;,NUMBER_HEX,&quot;0x9&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hgatp&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hgatp&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMIN.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMIN.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sb x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sb x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sb x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sb x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store byte&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(beq,&quot;.text\nbeq x2, x3, other_label&quot;,x2,x3,&quot;other_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(beq,&quot;.text\nbeq x2, x3, other_label&quot;,x2,x3,&quot;other_label&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;13.0f&quot;,NUMBER_FLOAT,&quot;13.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;13.0f&quot;,NUMBER_FLOAT,&quot;13.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;htimedelta&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;htimedelta&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrs cycle, x7&quot;,&quot;csrrs x0, cycle, x7&quot;,&quot;Set cycle count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrs cycle, x7&quot;,&quot;csrrs x0, cycle, x7&quot;,&quot;Set cycle count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;12.0f&quot;,NUMBER_FLOAT,&quot;12.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;12.0f&quot;,NUMBER_FLOAT,&quot;12.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lb x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lb x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lb x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lb x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load byte&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.JALR&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.JALR&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;fp&quot;,REGISTER,&quot;x8&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;fp&quot;,REGISTER,&quot;x8&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sideleg&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sideleg&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRRC&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRRC&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x80(x0)&quot;,x1,zero,128)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x80(x0)&quot;,x1,zero,128)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sstatus&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sstatus&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;scontext&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;scontext&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mvendorid&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mvendorid&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdcycleh x1&quot;,&quot;csrrs x1, cycleh, x0&quot;,&quot;Read cycle count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdcycleh x1&quot;,&quot;csrrs x1, cycleh, x0&quot;,&quot;Read cycle count&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SB&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SB&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;2.0f&quot;,NUMBER_FLOAT,&quot;2.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;2.0f&quot;,NUMBER_FLOAT,&quot;2.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseRInstruction(add,x1,x2,x3)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseRInstruction(add,x1,x2,x3)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BLEZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BLEZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ANDI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ANDI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s3&quot;,REGISTER,&quot;x19&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s3&quot;,REGISTER,&quot;x19&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SC.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SC.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.MV&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.MV&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.BEQZ&quot;,OP_CB)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.BEQZ&quot;,OP_CB)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;frflags x5&quot;,&quot;csrrs x5, fflags, x0&quot;,&quot;Read floating point flags CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;frflags x5&quot;,&quot;csrrs x5, fflags, x0&quot;,&quot;Read floating point flags CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fsflags&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fsflags&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;stval&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;stval&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fabs.d&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fabs.d&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x05&quot;,REGISTER,&quot;x5&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x05&quot;,REGISTER,&quot;x5&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option push&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option push&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x85, 0x05&quot;,NUMBER_HEX,&quot;0x85&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x85, 0x05&quot;,NUMBER_HEX,&quot;0x85&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ADDIW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ADDIW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bnez x2, 0x00000002&quot;,&quot;bne x2, x0, 0x00000002&quot;,&quot;Branch if not equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bnez x2, 0x00000002&quot;,&quot;bne x2, x0, 0x00000002&quot;,&quot;Branch if not equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpaddr1&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpaddr1&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdinstret x3&quot;,&quot;csrrs x3, instret, x0&quot;,&quot;Read instruction count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdinstret x3&quot;,&quot;csrrs x3, instret, x0&quot;,&quot;Read instruction count&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hpmcounter4&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hpmcounter4&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SGTZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SGTZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;REMW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;REMW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSGNJN&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSGNJN&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrci instret, 0x2&quot;,&quot;csrrci x0, instret, 0x2&quot;,&quot;Clear instruction count CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrci instret, 0x2&quot;,&quot;csrrci x0, instret, 0x2&quot;,&quot;Clear instruction count CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSELECT&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSELECT&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMV.D.X&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMV.D.X&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="MachineCode(&quot;.text\n    li      a5,0      # should result in 0x00000793u\n    lui     a0,10     # should result in 0x00010537u\n    ret               # should result in 0x00008067u\n    auipc   gp,0x2    # should result in 0x00002197u\n    sub     a2,a2,a0  # should result in 0x40a60633u\n    li      a1,0      # should result in 0x00000593u\n    auipc   a0,0      # should result in 0x00000517u\n    lw      a0,0(sp)  # should result in 0x00012503u\n    addi    a1,sp,8   # should result in 0x00810593u\n    li      a2,0      # should result in 0x00000613u\n    addi    sp,sp,-16 # should result in 0xff010113u\n    sd      s0,0(sp)  # should result in 0x00813023u\n&quot;,[1939, 66871, 32871, 8599, 1084622387, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Assembler.CodeGeneratorTests" name="MachineCode(&quot;.text\n    li      a5,0      # should result in 0x00000793u\n    lui     a0,10     # should result in 0x00010537u\n    ret               # should result in 0x00008067u\n    auipc   gp,0x2    # should result in 0x00002197u\n    sub     a2,a2,a0  # should result in 0x40a60633u\n    li      a1,0      # should result in 0x00000593u\n    auipc   a0,0      # should result in 0x00000517u\n    lw      a0,0(sp)  # should result in 0x00012503u\n    addi    a1,sp,8   # should result in 0x00810593u\n    li      a2,0      # should result in 0x00000613u\n    addi    sp,sp,-16 # should result in 0xff010113u\n    sd      s0,0(sp)  # should result in 0x00813023u\n&quot;,[1939, 66871, 32871, 8599, 1084622387, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vscause&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vscause&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ADD&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ADD&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;la x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   addi x1, x1, %pcrel_lo(myVar)&quot;,&quot;Load address into x1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;la x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   addi x1, x1, %pcrel_lo(myVar)&quot;,&quot;Load address into x1&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;MRET&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;MRET&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSQRT.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSQRT.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsrm x4&quot;,&quot;csrrs x0, frm, x4&quot;,&quot;Set floating point rounding mode CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsrm x4&quot;,&quot;csrrs x0, frm, x4&quot;,&quot;Set floating point rounding mode CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x5, 0x7C1&quot;,&quot;csrrs x5, 0x7C1, x0&quot;,&quot;Read custom CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x5, 0x7C1&quot;,&quot;csrrs x5, 0x7C1, x0&quot;,&quot;Read custom CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;htval&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;htval&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ECALL&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ECALL&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMINU.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMINU.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%got_pcrel_lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel_lo&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%got_pcrel_lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel_lo&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t0&quot;,REGISTER,&quot;x5&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t0&quot;,REGISTER,&quot;x5&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0(x0)&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0(x0)&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vsepc&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vsepc&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;uie&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;uie&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xc&quot;,NUMBER_HEX,&quot;0xc&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xc&quot;,NUMBER_HEX,&quot;0xc&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t03&quot;,REGISTER,&quot;x28&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t03&quot;,REGISTER,&quot;x28&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FLW&quot;,OP_CL)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FLW&quot;,OP_CL)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b1001&quot;,NUMBER_BIN,&quot;0b1001&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b1001&quot;,NUMBER_BIN,&quot;0b1001&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0.0f&quot;,NUMBER_FLOAT,&quot;0.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0.0f&quot;,NUMBER_FLOAT,&quot;0.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.LD&quot;,OP_CL)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.LD&quot;,OP_CL)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bltz x1, 0x00000003&quot;,&quot;blt x1, x0, 0x00000003&quot;,&quot;Branch if less than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bltz x1, 0x00000003&quot;,&quot;blt x1, x0, 0x00000003&quot;,&quot;Branch if less than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ADDI4SPN&quot;,OP_CIW)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ADDI4SPN&quot;,OP_CIW)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;beqz x1, 0x00000003&quot;,&quot;beq x1, x0, 0x00000003&quot;,&quot;Branch if equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;beqz x1, 0x00000003&quot;,&quot;beq x1, x0, 0x00000003&quot;,&quot;Branch if equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLTIU&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLTIU&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;flw f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   flw f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;flw f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   flw f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load word&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;csrc&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;csrc&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s06&quot;,REGISTER,&quot;x22&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s06&quot;,REGISTER,&quot;x22&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VMAX&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VMAX&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;marchid&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;marchid&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0xFF&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0xFF&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x30&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x30&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpaddr0&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpaddr0&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s6&quot;,REGISTER,&quot;x22&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s6&quot;,REGISTER,&quot;x22&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRAI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRAI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRRS&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRRS&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lla x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\naddi x2, x2, %pcrel_lo(myVar1)&quot;,&quot;Load address into x2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lla x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\naddi x2, x2, %pcrel_lo(myVar1)&quot;,&quot;Load address into x2&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSGNJ&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSGNJ&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VEXTRACT&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VEXTRACT&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;utvec&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;utvec&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;neg x3, x3&quot;,&quot;sub x3, x0, x3&quot;,&quot;Two's complement negation&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;neg x3, x3&quot;,&quot;sub x3, x0, x3&quot;,&quot;Two's complement negation&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vstval&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vstval&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;instreth&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;instreth&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;     .text&quot;,WHITESPACE,&quot;     &quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;     .text&quot;,WHITESPACE,&quot;     &quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;DIVU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;DIVU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b0&quot;,NUMBER_BIN,&quot;0b0&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b0&quot;,NUMBER_BIN,&quot;0b0&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hgeip&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hgeip&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSQRET&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSQRET&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;flw f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  flw f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;flw f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  flw f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load word&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.D.L&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.D.L&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option norelax&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option norelax&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMAX.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMAX.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;norelax&quot;,IDENTIFIER,&quot;norelax&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;norelax&quot;,IDENTIFIER,&quot;norelax&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mscratch&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mscratch&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ori,&quot;.text\nori x1, x0, -1&quot;,x1,zero,-1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ori,&quot;.text\nori x1, x0, -1&quot;,x1,zero,-1)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSQRT.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSQRT.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LHU&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LHU&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VAND&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VAND&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BEQ&quot;,OP_B)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BEQ&quot;,OP_B)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrw 0x7C0, x1&quot;,&quot;csrrw x0, 0x7C0, x1&quot;,&quot;Write custom CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrw 0x7C0, x1&quot;,&quot;csrrw x0, 0x7C0, x1&quot;,&quot;Write custom CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdtime x3&quot;,&quot;csrrs x3, time, x0&quot;,&quot;Read time&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdtime x3&quot;,&quot;csrrs x3, time, x0&quot;,&quot;Read time&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x25&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x25&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fscsr x2&quot;,&quot;csrrs x0, fcsr, x2&quot;,&quot;Set floating point control/status register&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fscsr x2&quot;,&quot;csrrs x0, fcsr, x2&quot;,&quot;Set floating point control/status register&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.double 0.1d, 4.5d, 2.4d, 2414.125125d&quot;,DIRECTIVE,&quot;.double&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.double 0.1d, 4.5d, 2.4d, 2414.125125d&quot;,DIRECTIVE,&quot;.double&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMV.W.X&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMV.W.X&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMAXU.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMAXU.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a07&quot;,REGISTER,&quot;x17&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a07&quot;,REGISTER,&quot;x17&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x14&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x14&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sd x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sd x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sd x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sd x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FDIV.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FDIV.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ADD&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ADD&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sd x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsd x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sd x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsd x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.half 0xFFf2, 0x0285, 0x0563&quot;,DIRECTIVE,&quot;.half&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.half 0xFFf2, 0x0285, 0x0563&quot;,DIRECTIVE,&quot;.half&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;beqz x2, 0x00000002&quot;,&quot;beq x2, x0, 0x00000002&quot;,&quot;Branch if equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;beqz x2, 0x00000002&quot;,&quot;beq x2, x0, 0x00000002&quot;,&quot;Branch if equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SRAI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SRAI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fld f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfld f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fld f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfld f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdinstret x2&quot;,&quot;csrrs x2, instret, x0&quot;,&quot;Read instruction count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdinstret x2&quot;,&quot;csrrs x2, instret, x0&quot;,&quot;Read instruction count&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;scause&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;scause&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s8&quot;,REGISTER,&quot;x24&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s8&quot;,REGISTER,&quot;x24&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t1&quot;,REGISTER,&quot;x6&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t1&quot;,REGISTER,&quot;x6&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vsscratch&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vsscratch&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FNMADD.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FNMADD.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSGNJ.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSGNJ.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSGNJN.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSGNJN.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrwi instret, 0x2&quot;,&quot;csrrwi x0, instret, 0x2&quot;,&quot;Write instruction count CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrwi instret, 0x2&quot;,&quot;csrrwi x0, instret, 0x2&quot;,&quot;Write instruction count CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FEQ.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FEQ.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VDIV&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VDIV&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;11.0f&quot;,NUMBER_FLOAT,&quot;11.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;11.0f&quot;,NUMBER_FLOAT,&quot;11.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;151326.52562f&quot;,NUMBER_FLOAT,&quot;151326.52562f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;151326.52562f&quot;,NUMBER_FLOAT,&quot;151326.52562f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;uip&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;uip&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ADDI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ADDI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x4&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x4&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SUBW&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SUBW&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BNEZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BNEZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LD&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LD&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPANDN&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPANDN&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FRCSR&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FRCSR&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;zero&quot;,REGISTER,&quot;x0&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;zero&quot;,REGISTER,&quot;x0&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdinstreth x2&quot;,&quot;csrrs x2, instreth, x0&quot;,&quot;Read instruction count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdinstreth x2&quot;,&quot;csrrs x2, instreth, x0&quot;,&quot;Read instruction count&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsw f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fsw f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Store word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsw f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fsw f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Store word&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option norvc&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option norvc&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMIN.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMIN.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fabs.s&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fabs.s&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.half 0xFFf2, 0x0285, 0x0563&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.half&quot;, &quot; &quot;, &quot;0xFFf2&quot;, &quot;, &quot;, &quot;0x0285&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.half 0xFFf2, 0x0285, 0x0563&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.half&quot;, &quot; &quot;, &quot;0xFFf2&quot;, &quot;, &quot;, &quot;0x0285&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOADD.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOADD.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VFNMADD&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VFNMADD&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option nopic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;nopic&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option nopic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;nopic&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;REMU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;REMU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lw x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lw x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lw x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lw x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load word&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x2&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x2&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bgez x3, 0x00000001&quot;,&quot;bge x3, x0, 0x00000001&quot;,&quot;Branch if greater than or equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bgez x3, 0x00000001&quot;,&quot;bge x3, x0, 0x00000001&quot;,&quot;Branch if greater than or equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FRRM&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FRRM&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x5&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x5&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRAIW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRAIW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;2&quot;,NUMBER_INT,&quot;2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;2&quot;,NUMBER_INT,&quot;2&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSETDCFG&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSETDCFG&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSCSR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSCSR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;relax&quot;,IDENTIFIER,&quot;relax&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;relax&quot;,IDENTIFIER,&quot;relax&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,DIRECTIVE,&quot;.byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,DIRECTIVE,&quot;.byte&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x8&quot;,NUMBER_HEX,&quot;0x8&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x8&quot;,NUMBER_HEX,&quot;0x8&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SW&quot;,OP_CS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SW&quot;,OP_CS)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x01&quot;,REGISTER,&quot;x1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x01&quot;,REGISTER,&quot;x1&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s03&quot;,REGISTER,&quot;x19&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s03&quot;,REGISTER,&quot;x19&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdcycleh x3&quot;,&quot;csrrs x3, cycleh, x0&quot;,&quot;Read cycle count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdcycleh x3&quot;,&quot;csrrs x3, cycleh, x0&quot;,&quot;Read cycle count&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;tail 0x74543765&quot;,&quot;auipc x6, 0x74543000\n    jal x0, 0x765&quot;,&quot;Tail call arr-away subroutine&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;tail 0x74543765&quot;,&quot;auipc x6, 0x74543000\n    jal x0, 0x765&quot;,&quot;Tail call arr-away subroutine&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLTI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLTI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrci time, 0x4&quot;,&quot;csrrci x0, time, 0x4&quot;,&quot;Clear time CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrci time, 0x4&quot;,&quot;csrrci x0, time, 0x4&quot;,&quot;Clear time CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;tdata1&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;tdata1&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option rvc&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option rvc&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hcause&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hcause&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hpmcounter31h&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hpmcounter31h&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;htegie&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;htegie&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FDIV.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FDIV.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPNE&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPNE&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.string \&quot;str\&quot;&quot;,DIRECTIVE,&quot;.string&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.string \&quot;str\&quot;&quot;,DIRECTIVE,&quot;.string&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;li x1, 0&quot;,&quot;addi x1, x0, 0&quot;,&quot;Load immediate&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;li x1, 0&quot;,&quot;addi x1, x0, 0&quot;,&quot;Load immediate&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRLI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRLI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;blez x2, 0x00000002&quot;,&quot;bge x0, x2, 0x00000002&quot;,&quot;Branch if less than or equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;blez x2, 0x00000002&quot;,&quot;bge x0, x2, 0x00000002&quot;,&quot;Branch if less than or equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrs instret, x6&quot;,&quot;csrrs x0, instret, x6&quot;,&quot;Set instruction count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrs instret, x6&quot;,&quot;csrrs x0, instret, x6&quot;,&quot;Set instruction count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FRCSR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FRCSR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(addi,&quot;.text\naddi x1, x0, 1&quot;,x1,zero,1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(addi,&quot;.text\naddi x1, x0, 1&quot;,x1,zero,1)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPGE&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPGE&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;jal&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;jal&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mhpmevent3&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mhpmevent3&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t3&quot;,REGISTER,&quot;x28&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t3&quot;,REGISTER,&quot;x28&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hpmcounter3&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hpmcounter3&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCLASS.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCLASS.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fcsr&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fcsr&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;blez x1, 0x00000003&quot;,&quot;bge x0, x1, 0x00000003&quot;,&quot;Branch if less than or equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;blez x1, 0x00000003&quot;,&quot;bge x0, x1, 0x00000003&quot;,&quot;Branch if less than or equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BLT&quot;,OP_B)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BLT&quot;,OP_B)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOOR.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOOR.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;utval&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;utval&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;uscratch&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;uscratch&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mepc&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mepc&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRRSI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRRSI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t06&quot;,REGISTER,&quot;x31&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t06&quot;,REGISTER,&quot;x31&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdtime x2&quot;,&quot;csrrs x2, time, x0&quot;,&quot;Read time&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdtime x2&quot;,&quot;csrrs x2, time, x0&quot;,&quot;Read time&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sip&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sip&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;REMUW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;REMUW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s4&quot;,REGISTER,&quot;x20&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s4&quot;,REGISTER,&quot;x20&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fld f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fld f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fld f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fld f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s7&quot;,REGISTER,&quot;x23&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s7&quot;,REGISTER,&quot;x23&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRCI&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRCI&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;2414.125125d&quot;,NUMBER_DOUBLE,&quot;2414.125125d&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;2414.125125d&quot;,NUMBER_DOUBLE,&quot;2414.125125d&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x28&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x28&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.dword 0xFAB3EA2363424253, 0x634242532535A244&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.dword&quot;, &quot; &quot;, &quot;0xFAB3EA2363424253&quot;, &quot;, &quot;, &quot;0x634242532535A244&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.dword 0xFAB3EA2363424253, 0x634242532535A244&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.dword&quot;, &quot; &quot;, &quot;0xFAB3EA2363424253&quot;, &quot;, &quot;, &quot;0x634242532535A244&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FLWSP&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FLWSP&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;snez x2, x1&quot;,&quot;sltu x2, x0, x1&quot;,&quot;Set if not equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;snez x2, x1&quot;,&quot;sltu x2, x0, x1&quot;,&quot;Set if not equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ori,&quot;.text\nori x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ori,&quot;.text\nori x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdcycle x1&quot;,&quot;csrrs x1, cycle, x0&quot;,&quot;Read cycle count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdcycle x1&quot;,&quot;csrrs x1, cycle, x0&quot;,&quot;Read cycle count&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x2, 0&quot;,x2,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x2, 0&quot;,x2,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;J&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;J&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x15&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x15&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOSWAP&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOSWAP&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x27&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x27&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;JAL&quot;,OP_J)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;JAL&quot;,OP_J)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x06&quot;,REGISTER,&quot;x6&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x06&quot;,REGISTER,&quot;x6&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;MUL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;MUL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSGNJN.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSGNJN.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x12&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x12&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;SLL ,&quot;,OP_R,&quot;SLL&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;SLL ,&quot;,OP_R,&quot;SLL&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;JALR&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;JALR&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b110&quot;,NUMBER_BIN,&quot;0b110&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b110&quot;,NUMBER_BIN,&quot;0b110&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRLW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRLW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mcounteren&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mcounteren&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VXOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VXOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x6&quot;,NUMBER_HEX,&quot;0x6&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x6&quot;,NUMBER_HEX,&quot;0x6&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x1, 5&quot;,x1,5)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x1, 5&quot;,x1,5)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bge,&quot;.text\nbge x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bge,&quot;.text\nbge x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VREM&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VREM&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;nopic&quot;,IDENTIFIER,&quot;nopic&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;nopic&quot;,IDENTIFIER,&quot;nopic&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;XORI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;XORI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sltz x1, x2&quot;,&quot;slt x1, x2, x0&quot;,&quot;Set if less than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sltz x1, x2&quot;,&quot;slt x1, x2, x0&quot;,&quot;Set if less than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrc cycle, x3&quot;,&quot;csrrc x0, cycle, x3&quot;,&quot;Clear cycle count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrc cycle, x3&quot;,&quot;csrrc x0, cycle, x3&quot;,&quot;Clear cycle count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sext.w&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sext.w&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option relax&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;relax&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option relax&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;relax&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="TestParseUTypeInstruction(auipc,&quot;.text\nauipc x1, 0x52345&quot;,x1,336709)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestUTypeInstructions" name="TestParseUTypeInstruction(auipc,&quot;.text\nauipc x1, 0x52345&quot;,x1,336709)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.text&quot;,DIRECTIVE,&quot;.text&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.text&quot;,DIRECTIVE,&quot;.text&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;DIVW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;DIVW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xf2, 0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0xf2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xf2, 0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0xf2&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s11&quot;,REGISTER,&quot;x27&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s11&quot;,REGISTER,&quot;x27&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x3, cycle&quot;,&quot;csrrs x3, cycle, x0&quot;,&quot;Read cycle count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x3, cycle&quot;,&quot;csrrs x3, cycle, x0&quot;,&quot;Read cycle count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOXOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOXOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SH&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SH&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mstatus&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mstatus&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRSI&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRSI&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option relax&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option relax&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FLD&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FLD&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;EBREAK&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;EBREAK&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;norvc&quot;,IDENTIFIER,&quot;norvc&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;norvc&quot;,IDENTIFIER,&quot;norvc&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SB&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SB&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;5&quot;,NUMBER_INT,&quot;5&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;5&quot;,NUMBER_INT,&quot;5&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BGEU&quot;,OP_B)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BGEU&quot;,OP_B)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOSWAP.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOSWAP.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sh x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sh x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store halfword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sh x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sh x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store halfword&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.option nopic&quot;,DIRECTIVE,&quot;.option&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.option nopic&quot;,DIRECTIVE,&quot;.option&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrs time, x8&quot;,&quot;csrrs x0, time, x8&quot;,&quot;Set time CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrs time, x8&quot;,&quot;csrrs x0, time, x8&quot;,&quot;Set time CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%pcrel_hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;pcrel_hi&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%pcrel_hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;pcrel_hi&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;sp&quot;,REGISTER,&quot;x2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;sp&quot;,REGISTER,&quot;x2&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x08&quot;,REGISTER,&quot;x8&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x08&quot;,REGISTER,&quot;x8&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x1, 0x7C0&quot;,&quot;csrrs x1, 0x7C0, x0&quot;,&quot;Read custom CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x1, 0x7C0&quot;,&quot;csrrs x1, 0x7C0, x0&quot;,&quot;Read custom CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x1, x0, -1&quot;,x1,zero,-1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(sltiu,&quot;.text\nsltiu x1, x0, -1&quot;,x1,zero,-1)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0&quot;,NUMBER_INT,&quot;0&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0&quot;,NUMBER_INT,&quot;0&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;j 0x8&quot;,&quot;jal x0, 0x8&quot;,&quot;Jump 8 bytes&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;j 0x8&quot;,&quot;jal x0, 0x8&quot;,&quot;Jump 8 bytes&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;csrw&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;csrw&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fmv.d&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fmv.d&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSRL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSRL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FLW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FLW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(srli,&quot;.text\nsrli x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(srli,&quot;.text\nsrli x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;11&quot;,NUMBER_INT,&quot;11&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;11&quot;,NUMBER_INT,&quot;11&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xa&quot;,NUMBER_HEX,&quot;0xa&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xa&quot;,NUMBER_HEX,&quot;0xa&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.JR&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.JR&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BNE&quot;,OP_B)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BNE&quot;,OP_B)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;10&quot;,NUMBER_INT,&quot;10&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;10&quot;,NUMBER_INT,&quot;10&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;1.0f&quot;,NUMBER_FLOAT,&quot;1.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;1.0f&quot;,NUMBER_FLOAT,&quot;1.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lh x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lh x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load halfword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lh x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lh x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load halfword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mv&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mv&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FLT.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FLT.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseBImmInstruction(bne,&quot;.text\nbne x2, x3, 4&quot;,x2,x3,4)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBImmInstruction(bne,&quot;.text\nbne x2, x3, 4&quot;,x2,x3,4)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fsrm&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fsrm&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s05&quot;,REGISTER,&quot;x21&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s05&quot;,REGISTER,&quot;x21&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSGNJX&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSGNJX&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x16&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x16&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;14&quot;,NUMBER_INT,&quot;14&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;14&quot;,NUMBER_INT,&quot;14&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdcycle x3&quot;,&quot;csrrs x3, cycle, x0&quot;,&quot;Read cycle count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdcycle x3&quot;,&quot;csrrs x3, cycle, x0&quot;,&quot;Read cycle count&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSRMI&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSRMI&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sgtz x2, x1&quot;,&quot;slt x2, x0, x1&quot;,&quot;Set if greater than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sgtz x2, x1&quot;,&quot;slt x2, x0, x1&quot;,&quot;Set if greater than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiMultiInstruction" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiMultiInstruction"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;not&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;not&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x20&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x20&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xe&quot;,NUMBER_HEX,&quot;0xe&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xe&quot;,NUMBER_HEX,&quot;0xe&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;time&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;time&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x7ff(x0)&quot;,x1,zero,2047)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x7ff(x0)&quot;,x1,zero,2047)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x7f(x0)&quot;,x1,zero,127)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ld,&quot;.text\nld x1, 0x7f(x0)&quot;,x1,zero,127)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sb x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sb x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sb x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sb x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store byte&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMV.X.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMV.X.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;2.4d&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;2.4d&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrwi 0x7C0, 0x1&quot;,&quot;csrrwi x0, 0x7C0, 0x1&quot;,&quot;Write custom CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrwi 0x7C0, 0x1&quot;,&quot;csrrwi x0, 0x7C0, 0x1&quot;,&quot;Write custom CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOADD&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOADD&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a02&quot;,REGISTER,&quot;x12&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a02&quot;,REGISTER,&quot;x12&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMAXU.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMAXU.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SRLI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SRLI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;neg x2, x1&quot;,&quot;sub x2, x0, x1&quot;,&quot;Two's complement negation&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;neg x2, x1&quot;,&quot;sub x2, x0, x1&quot;,&quot;Two's complement negation&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;la x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\naddi x3, x3, %pcrel_lo(myVar152)&quot;,&quot;Load address into x3&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;la x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\naddi x3, x3, %pcrel_lo(myVar152)&quot;,&quot;Load address into x3&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;tdata3&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;tdata3&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSTS&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSTS&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;9&quot;,NUMBER_INT,&quot;9&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;9&quot;,NUMBER_INT,&quot;9&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrwi cycle, 0x3&quot;,&quot;csrrwi x0, cycle, 0x3&quot;,&quot;Write cycle count CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrwi cycle, 0x3&quot;,&quot;csrrwi x0, cycle, 0x3&quot;,&quot;Write cycle count CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mhpmevent4&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mhpmevent4&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOOR.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOOR.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x24&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x24&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(andi,&quot;.text\nandi x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(andi,&quot;.text\nandi x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.LI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.LI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a1&quot;,REGISTER,&quot;x11&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a1&quot;,REGISTER,&quot;x11&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrsi time, 0x8&quot;,&quot;csrrsi x0, time, 0x8&quot;,&quot;Set time CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrsi time, 0x8&quot;,&quot;csrrsi x0, time, 0x8&quot;,&quot;Set time CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;REM&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;REM&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;TAIL&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;TAIL&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.LW&quot;,OP_CL)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.LW&quot;,OP_CL)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sepc&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sepc&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x1, 0x50&quot;,x1,80)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x1, 0x50&quot;,x1,80)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.text&quot;,[DIRECTIVE, EOF, EOF, EOF],[&quot;.text&quot;, null, null, null])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.text&quot;,[DIRECTIVE, EOF, EOF, EOF],[&quot;.text&quot;, null, null, null])"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(blt,&quot;.text\nblt x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(blt,&quot;.text\nblt x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LUI&quot;,OP_U)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LUI&quot;,OP_U)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VST&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VST&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSGNJX.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSGNJX.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BLTZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BLTZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpcfg2&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpcfg2&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;dscratch1&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;dscratch1&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLLIW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLLIW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;dcsr&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;dcsr&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.WU.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.WU.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bgeu,&quot;.text\nbgeu x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hpmcounter31&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hpmcounter31&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BGTZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BGTZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x10&quot;,NUMBER_HEX,&quot;0x10&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x10&quot;,NUMBER_HEX,&quot;0x10&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lb x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlb x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lb x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlb x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load byte&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRRCI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRRCI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x26&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x26&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option norvc&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;norvc&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option norvc&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;norvc&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(addi,&quot;.text\naddi x2, x0, -1&quot;,x2,zero,-1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(addi,&quot;.text\naddi x2, x0, -1&quot;,x2,zero,-1)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ORI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ORI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VCVT&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VCVT&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;seqz&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;seqz&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sw x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sw x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sw x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sw x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store word&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a5&quot;,REGISTER,&quot;x15&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a5&quot;,REGISTER,&quot;x15&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VADD&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VADD&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseUTypeInstruction(lui,&quot;.text\nlui x1, 0&quot;,x1,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestUTypeInstructions" name="TestParseUTypeInstruction(lui,&quot;.text\nlui x1, 0&quot;,x1,0)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.word 0xFAB3EA23, 0x63424253, 0x2535A244&quot;,DIRECTIVE,&quot;.word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.word 0xFAB3EA23, 0x63424253, 0x2535A244&quot;,DIRECTIVE,&quot;.word&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x02&quot;,REGISTER,&quot;x2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x02&quot;,REGISTER,&quot;x2&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(xori,&quot;.text\nxori x1, x0, -1&quot;,x1,zero,-1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(xori,&quot;.text\nxori x1, x0, -1&quot;,x1,zero,-1)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCLASS.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCLASS.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AUIPC&quot;,OP_U)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AUIPC&quot;,OP_U)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;tp&quot;,REGISTER,&quot;x4&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;tp&quot;,REGISTER,&quot;x4&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FLT.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FLT.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;ld x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   ld x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;ld x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   ld x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(xori,&quot;.text\nxori x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(xori,&quot;.text\nxori x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mie&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mie&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t05&quot;,REGISTER,&quot;x30&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t05&quot;,REGISTER,&quot;x30&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOAND.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOAND.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VFMSUB&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VFMSUB&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x10&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x10&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SUBW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SUBW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;neg x1, x2&quot;,&quot;sub x1, x0, x2&quot;,&quot;Two's complement negation&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;neg x1, x2&quot;,&quot;sub x1, x0, x2&quot;,&quot;Two's complement negation&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdtimeh x2&quot;,&quot;csrrs x2, timeh, x0&quot;,&quot;Read time&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdtimeh x2&quot;,&quot;csrrs x2, timeh, x0&quot;,&quot;Read time&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddAndSubInstructions" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseAddAndSubInstructions"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lw x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlw x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lw x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlw x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load word&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sh x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sh x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store halfword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sh x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sh x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store halfword&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0x02&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x02, 0x85, 0x05&quot;,NUMBER_HEX,&quot;0x02&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b111&quot;,NUMBER_BIN,&quot;0b111&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b111&quot;,NUMBER_BIN,&quot;0b111&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a04&quot;,REGISTER,&quot;x14&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a04&quot;,REGISTER,&quot;x14&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;-42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;-42.2f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;-42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;-42.2f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;jr x7&quot;,&quot;jalr x0, 0(x7)&quot;,&quot;Jump register&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;jr x7&quot;,&quot;jalr x0, 0(x7)&quot;,&quot;Jump register&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.W.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.W.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;tselect&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;tselect&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPSWAP&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPSWAP&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b1000&quot;,NUMBER_BIN,&quot;0b1000&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b1000&quot;,NUMBER_BIN,&quot;0b1000&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FADD.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FADD.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMSUB.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMSUB.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sgtz x3, x3&quot;,&quot;slt x3, x0, x3&quot;,&quot;Set if greater than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sgtz x3, x3&quot;,&quot;slt x3, x0, x3&quot;,&quot;Set if greater than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpcfg0&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpcfg0&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;RDCYCLE[H]&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;RDCYCLE[H]&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.S.L&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.S.L&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x4, time&quot;,&quot;csrrs x4, time, x0&quot;,&quot;Read time CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x4, time&quot;,&quot;csrrs x4, time, x0&quot;,&quot;Read time CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t4&quot;,REGISTER,&quot;x29&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t4&quot;,REGISTER,&quot;x29&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ANDI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ANDI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMAX&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMAX&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;yolo:&quot;,LABEL,&quot;yolo&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;yolo:&quot;,LABEL,&quot;yolo&quot;)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option norelax&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;norelax&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option norelax&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;norelax&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsd f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fsd f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Store doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsd f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fsd f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Store doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;la x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  addi x2, x2, %pcrel_lo(myVar1)&quot;,&quot;Load address into x2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;la x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  addi x2, x2, %pcrel_lo(myVar1)&quot;,&quot;Load address into x2&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bltu,&quot;.text\nbltu x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vstvec&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vstvec&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.D.LU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.D.LU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSD&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSD&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sedeleg&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sedeleg&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;242&quot;,NUMBER_INT,&quot;242&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;242&quot;,NUMBER_INT,&quot;242&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSW&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSW&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpcfg14&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpcfg14&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x04&quot;,REGISTER,&quot;x4&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x04&quot;,REGISTER,&quot;x4&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x29&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x29&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrsi cycle, 0x7&quot;,&quot;csrrsi x0, cycle, 0x7&quot;,&quot;Set cycle count CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrsi cycle, 0x7&quot;,&quot;csrrsi x0, cycle, 0x7&quot;,&quot;Set cycle count CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;timeh&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;timeh&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSGNJ.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSGNJ.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;dpc&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;dpc&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;satp&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;satp&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;flw&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;flw&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x31&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x31&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lb x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lb x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lb x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lb x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load byte&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ADDIW&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ADDIW&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fneg.s&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fneg.s&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x1&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x1&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpaddr63&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpaddr63&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t2&quot;,REGISTER,&quot;x7&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t2&quot;,REGISTER,&quot;x7&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a7&quot;,REGISTER,&quot;x17&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a7&quot;,REGISTER,&quot;x17&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b11&quot;,NUMBER_BIN,&quot;0b11&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b11&quot;,NUMBER_BIN,&quot;0b11&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LA&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LA&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LB&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LB&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SD&quot;,OP_CS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SD&quot;,OP_CS)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bnez x3, 0x00000001&quot;,&quot;bne x3, x0, 0x00000001&quot;,&quot;Branch if not equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bnez x3, 0x00000001&quot;,&quot;bne x3, x0, 0x00000001&quot;,&quot;Branch if not equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option rvc&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;rvc&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option rvc&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;rvc&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x21&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x21&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s9&quot;,REGISTER,&quot;x25&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s9&quot;,REGISTER,&quot;x25&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;gp&quot;,REGISTER,&quot;x3&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;gp&quot;,REGISTER,&quot;x3&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VMUL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VMUL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b101&quot;,NUMBER_BIN,&quot;0b101&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b101&quot;,NUMBER_BIN,&quot;0b101&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdtimeh x1&quot;,&quot;csrrs x1, timeh, x0&quot;,&quot;Read time&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdtimeh x1&quot;,&quot;csrrs x1, timeh, x0&quot;,&quot;Read time&quot;)"/>
    </UnitTest>
    <UnitTest name="noWhiteSpaceReadTokens(&quot; sh x2, 0(x1)&quot;,[OP_S, REGISTER, NUMBER_INT, PARREN_OPEN, REGISTER, ...],[&quot;SH&quot;, &quot;x2&quot;, &quot;0&quot;, &quot;(&quot;, &quot;x1&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="noWhiteSpaceReadTokens(&quot; sh x2, 0(x1)&quot;,[OP_S, REGISTER, NUMBER_INT, PARREN_OPEN, REGISTER, ...],[&quot;SH&quot;, &quot;x2&quot;, &quot;0&quot;, &quot;(&quot;, &quot;x1&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMAX.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMAX.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.EBRAKE&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.EBRAKE&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="TestParseRInstruction(sub,tp,x5,t1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseRInstruction(sub,tp,x5,t1)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLLI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLLI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hie&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hie&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sltz x2, x1&quot;,&quot;slt x2, x1, x0&quot;,&quot;Set if less than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sltz x2, x1&quot;,&quot;slt x2, x1, x0&quot;,&quot;Set if less than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPEQ&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPEQ&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdtime x1&quot;,&quot;csrrs x1, time, x0&quot;,&quot;Read time&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdtime x1&quot;,&quot;csrrs x1, time, x0&quot;,&quot;Read time&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;MULHU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;MULHU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.JAL&quot;,OP_CJ)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.JAL&quot;,OP_CJ)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a06&quot;,REGISTER,&quot;x16&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a06&quot;,REGISTER,&quot;x16&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;8.0f&quot;,NUMBER_FLOAT,&quot;8.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;8.0f&quot;,NUMBER_FLOAT,&quot;8.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsw f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fsw f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Store word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsw f1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   fsw f1, %pcrel_lo(myVar)(x1)&quot;,&quot;Store word&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LR.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LR.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a00&quot;,REGISTER,&quot;x10&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a00&quot;,REGISTER,&quot;x10&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s1&quot;,REGISTER,&quot;x9&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s1&quot;,REGISTER,&quot;x9&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.L.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.L.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;MULW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;MULW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FLE.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FLE.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s01&quot;,REGISTER,&quot;x9&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s01&quot;,REGISTER,&quot;x9&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FLDSP&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FLDSP&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(srli,&quot;.text\nsrli x1, x0, 5&quot;,x1,zero,5)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(srli,&quot;.text\nsrli x1, x0, 5&quot;,x1,zero,5)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FEQ.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FEQ.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOAND.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOAND.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPNOT&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPNOT&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRA&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRA&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x7&quot;,NUMBER_HEX,&quot;0x7&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x7&quot;,NUMBER_HEX,&quot;0x7&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.S.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.S.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRRW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRRW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VFNMSUB&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VFNMSUB&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SUB&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SUB&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ble&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ble&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRET&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRET&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;jalr&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;jalr&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrwi time, 0x4&quot;,&quot;csrrwi x0, time, 0x4&quot;,&quot;Write time CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrwi time, 0x4&quot;,&quot;csrrwi x0, time, 0x4&quot;,&quot;Write time CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;call&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;call&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x05&quot;,NUMBER_HEX,&quot;0x05&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x05&quot;,NUMBER_HEX,&quot;0x05&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrw cycle, x3&quot;,&quot;csrrw x0, cycle, x3&quot;,&quot;Write cycle count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrw cycle, x3&quot;,&quot;csrrw x0, cycle, x3&quot;,&quot;Write cycle count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsd f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfsd f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Store doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsd f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfsd f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Store doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;dscratch0&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;dscratch0&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="TestParseUTypeInstruction(lui,&quot;.text\nlui x1, 0x12345&quot;,x1,74565)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestUTypeInstructions" name="TestParseUTypeInstruction(lui,&quot;.text\nlui x1, 0x12345&quot;,x1,74565)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrc instret, x2&quot;,&quot;csrrc x0, instret, x2&quot;,&quot;Clear instruction count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrc instret, x2&quot;,&quot;csrrc x0, instret, x2&quot;,&quot;Clear instruction count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x07&quot;,REGISTER,&quot;x7&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x07&quot;,REGISTER,&quot;x7&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slti,&quot;.text\nslti x4, x5, 0xff&quot;,tp,x5,255)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slti,&quot;.text\nslti x4, x5, 0xff&quot;,tp,x5,255)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x9&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x9&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b10&quot;,NUMBER_BIN,&quot;0b10&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b10&quot;,NUMBER_BIN,&quot;0b10&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;bleu&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;bleu&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdinstret x1&quot;,&quot;csrrs x1, instret, x0&quot;,&quot;Read instruction count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdinstret x1&quot;,&quot;csrrs x1, instret, x0&quot;,&quot;Read instruction count&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a05&quot;,REGISTER,&quot;x15&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a05&quot;,REGISTER,&quot;x15&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VMIN&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VMIN&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t5&quot;,REGISTER,&quot;x30&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t5&quot;,REGISTER,&quot;x30&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bltz x3, 0x00000001&quot;,&quot;blt x3, x0, 0x00000001&quot;,&quot;Branch if less than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bltz x3, 0x00000001&quot;,&quot;blt x3, x0, 0x00000001&quot;,&quot;Branch if less than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.LWSP&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.LWSP&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x2&quot;,NUMBER_HEX,&quot;0x2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x2&quot;,NUMBER_HEX,&quot;0x2&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;tdata2&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;tdata2&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;yolo&quot;,IDENTIFIER,&quot;yolo&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;yolo&quot;,IDENTIFIER,&quot;yolo&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;RDTIME[H]&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;RDTIME[H]&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x4&quot;,NUMBER_HEX,&quot;0x4&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x4&quot;,NUMBER_HEX,&quot;0x4&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;MULHSU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;MULHSU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.AND&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.AND&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FSDSP&quot;,OP_CSS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FSDSP&quot;,OP_CSS)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bgez x2, 0x00000002&quot;,&quot;bge x2, x0, 0x00000002&quot;,&quot;Branch if greater than or equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bgez x2, 0x00000002&quot;,&quot;bge x2, x0, 0x00000002&quot;,&quot;Branch if greater than or equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x8, timeh&quot;,&quot;csrrs x8, timeh, x0&quot;,&quot;Read time CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x8, timeh&quot;,&quot;csrrs x8, timeh, x0&quot;,&quot;Read time CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bge,&quot;.text\nbge x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bge,&quot;.text\nbge x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrw time, x4&quot;,&quot;csrrw x0, time, x4&quot;,&quot;Write time CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrw time, x4&quot;,&quot;csrrw x0, time, x4&quot;,&quot;Write time CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slti,&quot;.text\nslti x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slti,&quot;.text\nslti x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;JR&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;JR&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMIN.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMIN.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;MULH&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;MULH&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fflags&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fflags&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fld&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fld&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sw x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsw x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sw x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsw x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store word&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SD&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SD&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LB&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LB&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FNMSUB.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FNMSUB.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseRInstruction(or,a0,a1,x12)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseRInstruction(or,a0,a1,x12)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.S.WU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.S.WU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x13&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x13&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a01&quot;,REGISTER,&quot;x11&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a01&quot;,REGISTER,&quot;x11&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMAX.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMAX.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sltz x3, x3&quot;,&quot;slt x3, x3, x0&quot;,&quot;Set if less than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sltz x3, x3&quot;,&quot;slt x3, x3, x0&quot;,&quot;Set if less than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x5&quot;,NUMBER_HEX,&quot;0x5&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x5&quot;,NUMBER_HEX,&quot;0x5&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrci 0x7C0, 0x1&quot;,&quot;csrrci x0, 0x7C0, 0x1&quot;,&quot;Clear custom CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrci 0x7C0, 0x1&quot;,&quot;csrrci x0, 0x7C0, 0x1&quot;,&quot;Clear custom CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slti,&quot;.text\nslti x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slti,&quot;.text\nslti x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;li x3, 2047&quot;,&quot;addi x3, x0, 2047&quot;,&quot;Load immediate&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;li x3, 2047&quot;,&quot;addi x3, x0, 2047&quot;,&quot;Load immediate&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(xori,&quot;.text\nxori x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(xori,&quot;.text\nxori x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ADDI16SP&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ADDI16SP&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VMERGE&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VMERGE&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fld f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fld f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fld f2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  fld f2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hstatus&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hstatus&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;42.2f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;42.2f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mcountinhibit&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mcountinhibit&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x00&quot;,REGISTER,&quot;x0&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x00&quot;,REGISTER,&quot;x0&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LBU&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LBU&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdinstreth x3&quot;,&quot;csrrs x3, instreth, x0&quot;,&quot;Read instruction count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdinstreth x3&quot;,&quot;csrrs x3, instreth, x0&quot;,&quot;Read instruction count&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;10.0f&quot;,NUMBER_FLOAT,&quot;10.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;10.0f&quot;,NUMBER_FLOAT,&quot;10.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x6, instreth&quot;,&quot;csrrs x6, instreth, x0&quot;,&quot;Read instruction count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x6, instreth&quot;,&quot;csrrs x6, instreth, x0&quot;,&quot;Read instruction count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSRA&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSRA&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fsw&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fsw&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ustatus&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ustatus&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LW&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LW&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slti,&quot;.text\nslti x5, x6, 0x100&quot;,x5,t1,256)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slti,&quot;.text\nslti x5, x6, 0x100&quot;,x5,t1,256)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.L.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.L.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fmv.s&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fmv.s&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x3&quot;,NUMBER_HEX,&quot;0x3&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x3&quot;,NUMBER_HEX,&quot;0x3&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LH&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LH&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="tokenPositions(&quot;.option push\n.option nopic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOL, DIRECTIVE, ...],[0, 0, 0, 0, 1, ...],[0, 7, 8, 12, 0, ...],[&quot;.option&quot;, &quot; &quot;, &quot;push&quot;, &quot;\n&quot;, &quot;.option&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="tokenPositions(&quot;.option push\n.option nopic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOL, DIRECTIVE, ...],[0, 0, 0, 0, 1, ...],[0, 7, 8, 12, 0, ...],[&quot;.option&quot;, &quot; &quot;, &quot;push&quot;, &quot;\n&quot;, &quot;.option&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;NEGW&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;NEGW&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SNEZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SNEZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s07&quot;,REGISTER,&quot;x23&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s07&quot;,REGISTER,&quot;x23&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;flw f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nflw f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;flw f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nflw f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load word&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(blt,&quot;.text\nblt x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(blt,&quot;.text\nblt x0, x1, some_label&quot;,zero,x1,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FNMADD.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FNMADD.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSGNJX.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSGNJX.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;pic&quot;,IDENTIFIER,&quot;pic&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;pic&quot;,IDENTIFIER,&quot;pic&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slli,&quot;.text\nslli x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slli,&quot;.text\nslli x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRAW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRAW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ucause&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ucause&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VMULH&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VMULH&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x1&quot;,NUMBER_HEX,&quot;0x1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x1&quot;,NUMBER_HEX,&quot;0x1&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;3&quot;,NUMBER_INT,&quot;3&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;3&quot;,NUMBER_INT,&quot;3&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(addi,&quot;.text\naddi x3, x0, 0x7f&quot;,x3,zero,127)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(addi,&quot;.text\naddi x3, x0, 0x7f&quot;,x3,zero,127)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bnez x1, 0x00000003&quot;,&quot;bne x1, x0, 0x00000003&quot;,&quot;Branch if not equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bnez x1, 0x00000003&quot;,&quot;bne x1, x0, 0x00000003&quot;,&quot;Branch if not equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BGE&quot;,OP_B)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BGE&quot;,OP_B)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;snez x1, x2&quot;,&quot;sltu x1, x0, x2&quot;,&quot;Set if not equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;snez x1, x2&quot;,&quot;sltu x1, x0, x2&quot;,&quot;Set if not equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.ADDW&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.ADDW&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpcfg3&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpcfg3&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SC.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SC.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fscsr&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fscsr&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(srli,&quot;.text\nsrli x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(srli,&quot;.text\nsrli x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;bgt&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;bgt&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLLW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLLW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mhpmevent31&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mhpmevent31&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;csrs&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;csrs&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.double 0.1d, 4.5d, 2.4d, 2414.125125d&quot;,[DIRECTIVE, WHITESPACE, NUMBER_DOUBLE, WHITESPACE, NUMBER_DOUBLE, ...],[&quot;.double&quot;, &quot; &quot;, &quot;0.1d&quot;, &quot;, &quot;, &quot;4.5d&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.double 0.1d, 4.5d, 2.4d, 2414.125125d&quot;,[DIRECTIVE, WHITESPACE, NUMBER_DOUBLE, WHITESPACE, NUMBER_DOUBLE, ...],[&quot;.double&quot;, &quot; &quot;, &quot;0.1d&quot;, &quot;, &quot;, &quot;4.5d&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;6&quot;,NUMBER_INT,&quot;6&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;6&quot;,NUMBER_INT,&quot;6&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0.1d, 4.5d, 2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;0.1d&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0.1d, 4.5d, 2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;0.1d&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseRInstruction(and,t2,fp,s1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseRInstruction(and,t2,fp,s1)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;ld x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  ld x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;ld x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  ld x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hpmcounter3h&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hpmcounter3h&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b100&quot;,NUMBER_BIN,&quot;0b100&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b100&quot;,NUMBER_BIN,&quot;0b100&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LD&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LD&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.J&quot;,OP_CJ)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.J&quot;,OP_CJ)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(bge,&quot;.text\nbge x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(bge,&quot;.text\nbge x1, x2, some_label&quot;,x1,x2,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrci cycle, 0x3&quot;,&quot;csrrci x0, cycle, 0x3&quot;,&quot;Clear cycle count CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrci cycle, 0x3&quot;,&quot;csrrci x0, cycle, 0x3&quot;,&quot;Clear cycle count CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMADD.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMADD.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;pmpcfg1&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;pmpcfg1&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdcycleh x2&quot;,&quot;csrrs x2, cycleh, x0&quot;,&quot;Read cycle count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdcycleh x2&quot;,&quot;csrrs x2, cycleh, x0&quot;,&quot;Read cycle count&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsw f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfsw f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Store word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsw f3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nfsw f3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Store word&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;stvec&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;stvec&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mideleg&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mideleg&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;push&quot;,IDENTIFIER,&quot;push&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;push&quot;,IDENTIFIER,&quot;push&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrc time, x4&quot;,&quot;csrrc x0, time, x4&quot;,&quot;Clear time CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrc time, x4&quot;,&quot;csrrc x0, time, x4&quot;,&quot;Clear time CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSUB.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSUB.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(addi,&quot;.text\naddi x4, x0, 0x80&quot;,tp,zero,128)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(addi,&quot;.text\naddi x4, x0, 0x80&quot;,tp,zero,128)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FSD&quot;,OP_CS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FSD&quot;,OP_CS)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SLTZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SLTZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMSUB.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMSUB.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t6&quot;,REGISTER,&quot;x31&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t6&quot;,REGISTER,&quot;x31&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOXOR.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOXOR.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;RET&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;RET&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSFLAGSI&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSFLAGSI&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRLIW&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRLIW&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slli,&quot;.text\nslli x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slli,&quot;.text\nslli x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSFLAGS&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSFLAGS&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;tail 0x4262fb3f&quot;,&quot;auipc x6, 0x4262f000\n    jal x0, 0xb3f&quot;,&quot;Tail call arr-away subroutine&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;tail 0x4262fb3f&quot;,&quot;auipc x6, 0x4262f000\n    jal x0, 0xb3f&quot;,&quot;Tail call arr-away subroutine&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xd&quot;,NUMBER_HEX,&quot;0xd&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xd&quot;,NUMBER_HEX,&quot;0xd&quot;)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;yolo&quot;,[IDENTIFIER, EOF, EOF, EOF],[&quot;yolo&quot;, null, null, null])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;yolo&quot;,[IDENTIFIER, EOF, EOF, EOF],[&quot;yolo&quot;, null, null, null])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fence&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fence&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;snez x3, x3&quot;,&quot;sltu x3, x0, x3&quot;,&quot;Set if not equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;snez x3, x3&quot;,&quot;sltu x3, x0, x3&quot;,&quot;Set if not equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseSwInstruction" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestSTypeInstructions" name="TestParseSwInstruction"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FRFLAGS&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FRFLAGS&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x11&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x11&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SD&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SD&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrc 0x7C0, x1&quot;,&quot;csrrc x0, 0x7C0, x1&quot;,&quot;Clear custom CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrc 0x7C0, x1&quot;,&quot;csrrc x0, 0x7C0, x1&quot;,&quot;Clear custom CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FENCE.I&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FENCE.I&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sscratch&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sscratch&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hcontext&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hcontext&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hip&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hip&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VFMADD&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VFMADD&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMV.X.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMV.X.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vsstatus&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vsstatus&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sd x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sd x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store doubleword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sd x2, myVar1, t2&quot;,&quot;auipc t2, %pcrel_hi(myVar1)\n  sd x2, %pcrel_lo(myVar1)(t2)&quot;,&quot;Store doubleword&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;frm&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;frm&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSUB.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSUB.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.D.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.D.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;RDINSTRET[H]&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;RDINSTRET[H]&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOADD.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOADD.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;-242&quot;,NUMBER_INT,&quot;-242&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;-242&quot;,NUMBER_INT,&quot;-242&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(andi,&quot;.text\nandi x1, x0, -1&quot;,x1,zero,-1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(andi,&quot;.text\nandi x1, x0, -1&quot;,x1,zero,-1)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0.1f, 42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;0.1f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0.1f, 42.2f, 151326.52562f&quot;,NUMBER_FLOAT,&quot;0.1f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;beqz x3, 0x00000001&quot;,&quot;beq x3, x0, 0x00000001&quot;,&quot;Branch if equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;beqz x3, 0x00000001&quot;,&quot;beq x3, x0, 0x00000001&quot;,&quot;Branch if equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;frcsr x1&quot;,&quot;csrrs x1, fcsr, x0&quot;,&quot;Read floating point control/status register&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;frcsr x1&quot;,&quot;csrrs x1, fcsr, x0&quot;,&quot;Read floating point control/status register&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseSubInstruction" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseSubInstruction"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;j 0x16&quot;,&quot;jal x0, 0x8&quot;,&quot;Jump 16 bytes&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;j 0x16&quot;,&quot;jal x0, 0x8&quot;,&quot;Jump 16 bytes&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.D.WU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.D.WU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fsd&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fsd&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.float 0.1f, 42.2f, 151326.52562f&quot;,[DIRECTIVE, WHITESPACE, NUMBER_FLOAT, WHITESPACE, NUMBER_FLOAT, ...],[&quot;.float&quot;, &quot; &quot;, &quot;0.1f&quot;, &quot;, &quot;, &quot;42.2f&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.float 0.1f, 42.2f, 151326.52562f&quot;,[DIRECTIVE, WHITESPACE, NUMBER_FLOAT, WHITESPACE, NUMBER_FLOAT, ...],[&quot;.float&quot;, &quot; &quot;, &quot;0.1f&quot;, &quot;, &quot;, &quot;42.2f&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x22&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x22&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x2, instret&quot;,&quot;csrrs x2, instret, x0&quot;,&quot;Read instruction count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x2, instret&quot;,&quot;csrrs x2, instret, x0&quot;,&quot;Read instruction count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRRWI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRRWI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s02&quot;,REGISTER,&quot;x18&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s02&quot;,REGISTER,&quot;x18&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSCSR&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSCSR&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdcycle x2&quot;,&quot;csrrs x2, cycle, x0&quot;,&quot;Read cycle count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdcycle x2&quot;,&quot;csrrs x2, cycle, x0&quot;,&quot;Read cycle count&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;htval2&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;htval2&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSLL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSLL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseAddInstruction" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestRTypeInstructions" name="TestParseAddInstruction"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FADD.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FADD.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hedeleg&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hedeleg&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VLD&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VLD&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a6&quot;,REGISTER,&quot;x16&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a6&quot;,REGISTER,&quot;x16&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SRL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SRL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VLDX&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VLDX&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;6.0f&quot;,NUMBER_FLOAT,&quot;6.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;6.0f&quot;,NUMBER_FLOAT,&quot;6.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;nop&quot;,&quot;addi x0, x0, 0&quot;,&quot;No operation&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;nop&quot;,&quot;addi x0, x0, 0&quot;,&quot;No operation&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSUB&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSUB&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;, SLL&quot;,WHITESPACE,&quot;, &quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;, SLL&quot;,WHITESPACE,&quot;, &quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a03&quot;,REGISTER,&quot;x13&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a03&quot;,REGISTER,&quot;x13&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FLD&quot;,OP_CL)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FLD&quot;,OP_CL)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;cycleh&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;cycleh&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="TestParseSbInstruction" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestSTypeInstructions" name="TestParseSbInstruction"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sb x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsb x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store byte&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sb x3, myVar152, t3&quot;,&quot;auipc t3, %pcrel_hi(myVar152)\nsb x3, %pcrel_lo(myVar152)(t3)&quot;,&quot;Store byte&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOSWAP.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOSWAP.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;scounteren&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;scounteren&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPAND&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPAND&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x6&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x6&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lw x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lw x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lw x1, myVar&quot;,&quot;auipc x1, %pcrel_hi(myVar)\n   lw x1, %pcrel_lo(myVar)(x1)&quot;,&quot;Load word&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x2, some_label2&quot;,x2,&quot;some_label2&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x2, some_label2&quot;,x2,&quot;some_label2&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPXOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPXOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FNMSUB.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FNMSUB.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s2&quot;,REGISTER,&quot;x18&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s2&quot;,REGISTER,&quot;x18&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;tail 0x81C45C2C&quot;,&quot;auipc x6, 0x81C45000\n    jal x0, 0xC2C&quot;,&quot;Tail call arr-away subroutine&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;tail 0x81C45C2C&quot;,&quot;auipc x6, 0x81C45000\n    jal x0, 0xC2C&quot;,&quot;Tail call arr-away subroutine&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VSTX&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VSTX&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;medeleg&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;medeleg&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;yolo:&quot;,[LABEL, EOF, EOF, EOF],[&quot;yolo&quot;, null, null, null])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;yolo:&quot;,[LABEL, EOF, EOF, EOF],[&quot;yolo&quot;, null, null, null])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FRFLAGS&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FRFLAGS&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;7&quot;,NUMBER_INT,&quot;7&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;7&quot;,NUMBER_INT,&quot;7&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x18&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x18&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sgtz x1, x2&quot;,&quot;slt x1, x0, x2&quot;,&quot;Set if greater than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sgtz x1, x2&quot;,&quot;slt x1, x0, x2&quot;,&quot;Set if greater than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option push&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;push&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option push&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;push&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ADDI&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ADDI&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.word 0xFAB3EA23, 0x63424253, 0x2535A244&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.word&quot;, &quot; &quot;, &quot;0xFAB3EA23&quot;, &quot;, &quot;, &quot;0x63424253&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.word 0xFAB3EA23, 0x63424253, 0x2535A244&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.word&quot;, &quot; &quot;, &quot;0xFAB3EA23&quot;, &quot;, &quot;, &quot;0x63424253&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSFLAGS&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSFLAGS&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0b1&quot;,NUMBER_BIN,&quot;0b1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0b1&quot;,NUMBER_BIN,&quot;0b1&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;rvc&quot;,IDENTIFIER,&quot;rvc&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;rvc&quot;,IDENTIFIER,&quot;rvc&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;14.0f&quot;,NUMBER_FLOAT,&quot;14.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;14.0f&quot;,NUMBER_FLOAT,&quot;14.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMUL.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMUL.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.FSWSP&quot;,OP_CSS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.FSWSP&quot;,OP_CSS)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOAND&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOAND&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMUL.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMUL.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.W.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.W.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FLE.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FLE.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lh x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lh x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load halfword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lh x2, myVar1&quot;,&quot;auipc x2, %pcrel_hi(myVar1)\n  lh x2, %pcrel_lo(myVar1)(x2)&quot;,&quot;Load halfword&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrs 0x7C0, x5&quot;,&quot;csrrs x0, 0x7C0, x5&quot;,&quot;Set custom CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrs 0x7C0, x5&quot;,&quot;csrrs x0, 0x7C0, x5&quot;,&quot;Set custom CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSRM&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSRM&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;vsip&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;vsip&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FENCE&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FENCE&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;ADDW&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;ADDW&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;DIV&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;DIV&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0xf&quot;,NUMBER_HEX,&quot;0xf&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0xf&quot;,NUMBER_HEX,&quot;0xf&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SH&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SH&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SW&quot;,OP_S)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SW&quot;,OP_S)"/>
    </UnitTest>
    <UnitTest name="TestParseBImmInstruction(bne,&quot;.text\nbne x3, x4, -8&quot;,x3,tp,-8)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBImmInstruction(bne,&quot;.text\nbne x3, x4, -8&quot;,x3,tp,-8)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;13&quot;,NUMBER_INT,&quot;13&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;13&quot;,NUMBER_INT,&quot;13&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s0&quot;,REGISTER,&quot;x8&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s0&quot;,REGISTER,&quot;x8&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mimpid&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mimpid&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VLDS&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VLDS&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.dword 0xFAB3EA2363424253, 0x634242532535A244&quot;,DIRECTIVE,&quot;.dword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.dword 0xFAB3EA2363424253, 0x634242532535A244&quot;,DIRECTIVE,&quot;.dword&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(blt,&quot;.text\nblt x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(blt,&quot;.text\nblt x2, x3, some_label&quot;,x2,x3,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;instret&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;instret&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s04&quot;,REGISTER,&quot;x20&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s04&quot;,REGISTER,&quot;x20&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrr x7, cycleh&quot;,&quot;csrrs x7, cycleh, x0&quot;,&quot;Read cycle count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrr x7, cycleh&quot;,&quot;csrrs x7, cycleh, x0&quot;,&quot;Read cycle count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hvip&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hvip&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;blez x3, 0x00000001&quot;,&quot;bge x0, x3, 0x00000001&quot;,&quot;Branch if less than or equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;blez x3, 0x00000001&quot;,&quot;bge x0, x3, 0x00000001&quot;,&quot;Branch if less than or equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.WU.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.WU.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdinstreth x1&quot;,&quot;csrrs x1, instreth, x0&quot;,&quot;Read instruction count&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdinstreth x1&quot;,&quot;csrrs x1, instreth, x0&quot;,&quot;Read instruction count&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slli,&quot;.text\nslli x1, x0, 5&quot;,x1,zero,5)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slli,&quot;.text\nslli x1, x0, 5&quot;,x1,zero,5)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hpmcounter4h&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hpmcounter4h&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x0&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x0&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="TestParseBImmInstruction(bne,&quot;.text\nbne x1, x2, 0&quot;,x1,x2,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBImmInstruction(bne,&quot;.text\nbne x1, x2, 0&quot;,x1,x2,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mcontext&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mcontext&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrsi instret, 0x6&quot;,&quot;csrrsi x0, instret, 0x6&quot;,&quot;Set instruction count CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrsi instret, 0x6&quot;,&quot;csrrsi x0, instret, 0x6&quot;,&quot;Set instruction count CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;NEG&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;NEG&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x19&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x19&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;htimedeltah&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;htimedeltah&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%got(myVar)&quot;,INLINE_DIRECTIVE,&quot;got&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%got(myVar)&quot;,INLINE_DIRECTIVE,&quot;got&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%got_pcrel(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%got_pcrel(myVar)&quot;,INLINE_DIRECTIVE,&quot;got_pcrel&quot;)"/>
    </UnitTest>
    <UnitTest name="InlineDirectives(&quot;pcrel_hi&quot;,PCREL_HI,&quot;pcrel_lo&quot;,PCREL_LO,&quot;myVar&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestInlineDirectives" name="InlineDirectives(&quot;pcrel_hi&quot;,PCREL_HI,&quot;pcrel_lo&quot;,PCREL_LO,&quot;myVar&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMINU.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMINU.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SLLI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SLLI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VCLASS&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VCLASS&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(andi,&quot;.text\nandi x1, x0, 0&quot;,x1,zero,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(andi,&quot;.text\nandi x1, x0, 0&quot;,x1,zero,0)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrw instret, x2&quot;,&quot;csrrw x0, instret, x2&quot;,&quot;Write instruction count CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrw instret, x2&quot;,&quot;csrrw x0, instret, x2&quot;,&quot;Write instruction count CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x23&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x23&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;0x0&quot;,NUMBER_HEX,&quot;0x0&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;0x0&quot;,NUMBER_HEX,&quot;0x0&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;ret&quot;,&quot;jalr x0, 0(x1)&quot;,&quot;Return from subroutine&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;ret&quot;,&quot;jalr x0, 0(x1)&quot;,&quot;Return from subroutine&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LR.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LR.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lh x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlh x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load halfword&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lh x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\nlh x3, %pcrel_lo(myVar152)(x3)&quot;,&quot;Load halfword&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;4.5d, 2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;4.5d&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;4.5d, 2.4d, 2414.125125d&quot;,NUMBER_DOUBLE,&quot;4.5d&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMAX.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMAX.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mstatush&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mstatush&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SETVL&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SETVL&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.OR&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.OR&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;12&quot;,NUMBER_INT,&quot;12&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;12&quot;,NUMBER_INT,&quot;12&quot;)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;     .text&quot;,[WHITESPACE, DIRECTIVE, EOF, EOF, EOF],[&quot;     &quot;, &quot;.text&quot;, null, null, null])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;     .text&quot;,[WHITESPACE, DIRECTIVE, EOF, EOF, EOF],[&quot;     &quot;, &quot;.text&quot;, null, null, null])"/>
    </UnitTest>
    <UnitTest name="TestParseBLabelInstruction(beq,&quot;.text\nbeq x1, x2, label&quot;,x1,x2,&quot;label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestBTypeInstructions" name="TestParseBLabelInstruction(beq,&quot;.text\nbeq x1, x2, label&quot;,x1,x2,&quot;label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mhartid&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mhartid&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;sie&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;sie&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;4.0f&quot;,NUMBER_FLOAT,&quot;4.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;4.0f&quot;,NUMBER_FLOAT,&quot;4.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;VPLT&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;VPLT&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.option pic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;pic&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.option pic&quot;,[DIRECTIVE, WHITESPACE, IDENTIFIER, EOF, EOF, ...],[&quot;.option&quot;, &quot; &quot;, &quot;pic&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BGEZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BGEZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;XOR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;XOR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;mtvec&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;mtvec&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;uepc&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;uepc&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FRRM&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FRRM&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;cycle&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;cycle&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.LUI&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.LUI&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;htinst&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;htinst&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SWSP&quot;,OP_CSS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SWSP&quot;,OP_CSS)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a0&quot;,REGISTER,&quot;x10&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a0&quot;,REGISTER,&quot;x10&quot;)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.string \&quot;str\&quot;&quot;,[DIRECTIVE, WHITESPACE, STRING, EOF, EOF, ...],[&quot;.string&quot;, &quot; &quot;, &quot;\&quot;str\&quot;&quot;, null, null, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.string \&quot;str\&quot;&quot;,[DIRECTIVE, WHITESPACE, STRING, EOF, EOF, ...],[&quot;.string&quot;, &quot; &quot;, &quot;\&quot;str\&quot;&quot;, null, null, ...])"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bgtz x1, 0x00000003&quot;,&quot;blt x0, x1, 0x00000003&quot;,&quot;Branch if greater than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bgtz x1, 0x00000003&quot;,&quot;blt x0, x1, 0x00000003&quot;,&quot;Branch if greater than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;misa&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;misa&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;sw x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sw x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store word&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;sw x1, myVar, t1&quot;,&quot;auipc t1, %pcrel_hi(myVar)\n   sw x1, %pcrel_lo(myVar)(t1)&quot;,&quot;Store word&quot;)"/>
    </UnitTest>
    <UnitTest name="noWhiteSpaceReadTokens(&quot; sh x2, 0x10(x1)&quot;,[OP_S, REGISTER, NUMBER_HEX, PARREN_OPEN, REGISTER, ...],[&quot;SH&quot;, &quot;x2&quot;, &quot;0x10&quot;, &quot;(&quot;, &quot;x1&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="noWhiteSpaceReadTokens(&quot; sh x2, 0x10(x1)&quot;,[OP_S, REGISTER, NUMBER_HEX, PARREN_OPEN, REGISTER, ...],[&quot;SH&quot;, &quot;x2&quot;, &quot;0x10&quot;, &quot;(&quot;, &quot;x1&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bgez x1, 0x00000003&quot;,&quot;bge x1, x0, 0x00000003&quot;,&quot;Branch if greater than or equal zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bgez x1, 0x00000003&quot;,&quot;bge x1, x0, 0x00000003&quot;,&quot;Branch if greater than or equal zero&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMIN.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMIN.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;.float 0.1f, 42.2f, 151326.52562f&quot;,DIRECTIVE,&quot;.float&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;.float 0.1f, 42.2f, 151326.52562f&quot;,DIRECTIVE,&quot;.float&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a2&quot;,REGISTER,&quot;x12&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a2&quot;,REGISTER,&quot;x12&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseShInstruction" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestSTypeInstructions" name="TestParseShInstruction"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;bgtu&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;bgtu&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x3&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x3&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;ra&quot;,REGISTER,&quot;x1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;ra&quot;,REGISTER,&quot;x1&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;li x2, 5&quot;,&quot;addi x2, x0, 5&quot;,&quot;Load immediate&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;li x2, 5&quot;,&quot;addi x2, x0, 5&quot;,&quot;Load immediate&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;csrr&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;csrr&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;fsflags x6&quot;,&quot;csrrs x0, fflags, x6&quot;,&quot;Set floating point flags CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;fsflags x6&quot;,&quot;csrrs x0, fflags, x6&quot;,&quot;Set floating point flags CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(slti,&quot;.text\nslti x1, x0, -1&quot;,x1,zero,-1)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(slti,&quot;.text\nslti x1, x0, -1&quot;,x1,zero,-1)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BEQZ&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BEQZ&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;lla x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\naddi x3, x3, %pcrel_lo(myVar152)&quot;,&quot;Load address into x3&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;lla x3, myVar152&quot;,&quot;auipc x3, %pcrel_hi(myVar152)\naddi x3, x3, %pcrel_lo(myVar152)&quot;,&quot;Load address into x3&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;hcounteren&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;hcounteren&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LH&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LH&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;1&quot;,NUMBER_INT,&quot;1&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;1&quot;,NUMBER_INT,&quot;1&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SDSP&quot;,OP_CSS)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SDSP&quot;,OP_CSS)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;lo&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%lo(myVar)&quot;,INLINE_DIRECTIVE,&quot;lo&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;BLTU&quot;,OP_B)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;BLTU&quot;,OP_B)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.XOR&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.XOR&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;%hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;hi&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;%hi(myVar)&quot;,INLINE_DIRECTIVE,&quot;hi&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s08&quot;,REGISTER,&quot;x24&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s08&quot;,REGISTER,&quot;x24&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x03&quot;,REGISTER,&quot;x3&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x03&quot;,REGISTER,&quot;x3&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;OR&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;OR&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s09&quot;,REGISTER,&quot;x25&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s09&quot;,REGISTER,&quot;x25&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;s5&quot;,REGISTER,&quot;x21&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;s5&quot;,REGISTER,&quot;x21&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;9.0f&quot;,NUMBER_FLOAT,&quot;9.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;9.0f&quot;,NUMBER_FLOAT,&quot;9.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LLA&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LLA&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;x8&quot;,REGISTER)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;x8&quot;,REGISTER)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;csrsi 0x7C0, 0x5&quot;,&quot;csrrsi x0, 0x7C0, 0x5&quot;,&quot;Set custom CSR (immediate)&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;csrsi 0x7C0, 0x5&quot;,&quot;csrrsi x0, 0x7C0, 0x5&quot;,&quot;Set custom CSR (immediate)&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;3.0f&quot;,NUMBER_FLOAT,&quot;3.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;3.0f&quot;,NUMBER_FLOAT,&quot;3.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;5.0f&quot;,NUMBER_FLOAT,&quot;5.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;5.0f&quot;,NUMBER_FLOAT,&quot;5.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FMADD.D&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FMADD.D&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.S.LU&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.S.LU&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;fneg.d&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;fneg.d&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FCVT.LU.S&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FCVT.LU.S&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;li&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;li&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;rdtimeh x3&quot;,&quot;csrrs x3, timeh, x0&quot;,&quot;Read time&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;rdtimeh x3&quot;,&quot;csrrs x3, timeh, x0&quot;,&quot;Read time&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;WFI&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;WFI&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x3, -8&quot;,x3,-8)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeImmInstruction(jal,&quot;.text\njal x3, -8&quot;,x3,-8)"/>
    </UnitTest>
    <UnitTest name="InlineDirectives(&quot;hi&quot;,HI,&quot;lo&quot;,LO,&quot;myVar&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestInlineDirectives" name="InlineDirectives(&quot;hi&quot;,HI,&quot;lo&quot;,LO,&quot;myVar&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;LWU&quot;,OP_I)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;LWU&quot;,OP_I)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;bgtz x2, 0x00000002&quot;,&quot;blt x0, x2, 0x00000002&quot;,&quot;Branch if greater than zero&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;bgtz x2, 0x00000002&quot;,&quot;blt x0, x2, 0x00000002&quot;,&quot;Branch if greater than zero&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;x09&quot;,REGISTER,&quot;x9&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;x09&quot;,REGISTER,&quot;x9&quot;)"/>
    </UnitTest>
    <UnitTest name="PseudoInstructions(&quot;frrm x3&quot;,&quot;csrrs x3, frm, x0&quot;,&quot;Read floating point rounding mode CSR&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestPsudoInstructions" name="PseudoInstructions(&quot;frrm x3&quot;,&quot;csrrs x3, frm, x0&quot;,&quot;Read floating point rounding mode CSR&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOXOR.W&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOXOR.W&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="TestParseUTypeInstruction(auipc,&quot;.text\nauipc x1, 0&quot;,x1,0)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestUTypeInstructions" name="TestParseUTypeInstruction(auipc,&quot;.text\nauipc x1, 0&quot;,x1,0)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.SUB&quot;,OP_CR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.SUB&quot;,OP_CR)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;SW&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;SW&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;bsatp&quot;,CSR)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;bsatp&quot;,CSR)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;t04&quot;,REGISTER,&quot;x29&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;t04&quot;,REGISTER,&quot;x29&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a4&quot;,REGISTER,&quot;x14&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a4&quot;,REGISTER,&quot;x14&quot;)"/>
    </UnitTest>
    <UnitTest name="TestParseAddiInstruction(ori,&quot;.text\nori x2, x3, 10&quot;,x2,x3,10)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestITypeInstructions" name="TestParseAddiInstruction(ori,&quot;.text\nori x2, x3, 10&quot;,x2,x3,10)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;FSRM&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;FSRM&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;a3&quot;,REGISTER,&quot;x13&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;a3&quot;,REGISTER,&quot;x13&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;CSRWI&quot;,OP_PSEUDO)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;CSRWI&quot;,OP_PSEUDO)"/>
    </UnitTest>
    <UnitTest name="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x1, some_label&quot;,x1,&quot;some_label&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.Parser.TestJTypeInstructions" name="TestParseJTypeLabelInstruction(jal,&quot;.text\njal x1, some_label&quot;,x1,&quot;some_label&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;C.LDSP&quot;,OP_CI)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;C.LDSP&quot;,OP_CI)"/>
    </UnitTest>
    <UnitTest name="fullReadToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.byte&quot;, &quot; &quot;, &quot;0xFF&quot;, &quot;, &quot;, &quot;0xf2&quot;, ...])" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="fullReadToken(&quot;.byte 0xFF, 0xf2, 0x02, 0x85, 0x05&quot;,[DIRECTIVE, WHITESPACE, NUMBER_HEX, WHITESPACE, NUMBER_HEX, ...],[&quot;.byte&quot;, &quot; &quot;, &quot;0xFF&quot;, &quot;, &quot;, &quot;0xf2&quot;, ...])"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AMOMIN&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AMOMIN&quot;,OP_R)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;\&quot;str\&quot;&quot;,STRING,&quot;\&quot;str\&quot;&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;\&quot;str\&quot;&quot;,STRING,&quot;\&quot;str\&quot;&quot;)"/>
    </UnitTest>
    <UnitTest name="readToken(&quot;7.0f&quot;,NUMBER_FLOAT,&quot;7.0f&quot;)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="readToken(&quot;7.0f&quot;,NUMBER_FLOAT,&quot;7.0f&quot;)"/>
    </UnitTest>
    <UnitTest name="sanityCheckOps(&quot;AND&quot;,OP_R)" storage="src/kore.kuick.tests/bin/release/net8.0/kore.kuick.tests.dll">
      <Execution/>
      <TestMethod codeBase="src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll" adapterTypeName="executor://nunit3testexecutor/" className="Kore.Kuick.Tests.LexerTests.LexerTests" name="sanityCheckOps(&quot;AND&quot;,OP_R)"/>
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
    <TestEntry/>
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List"/>
    <TestList name="All Loaded Results"/>
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="879" executed="855" passed="809" failed="46" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0"/>
    <Output>
      <StdOut>NUnit Adapter 3.16.1.0: Test execution started
Running all tests in src/Kore.Kuick.Tests/bin/Release/net8.0/Kore.Kuick.Tests.dll
   NUnit3TestExecutor converted 879 of 879 NUnit test cases
Test 'sanityCheckOps("FRCSR",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("FSCSR",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("FRRM",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("FSRM",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("FRFLAGS",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("FSFLAGS",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("LB",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("LH",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("LW",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("LD",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("SB",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("SH",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("SW",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("SD",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("flw",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fld",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fsw",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fsd",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("jal",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("jalr",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fence",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fscsr",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fsrm",OP_PSEUDO)' was skipped in the test run.
Test 'sanityCheckOps("fsflags",OP_PSEUDO)' was skipped in the test run.
NUnit Adapter 3.16.1.0: Test execution complete
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>
