
**********************
Assembly Specification
**********************

For those familiar with x84 or x64 assembly architecture you may find some defrences in the KORE Cpu architecture or assembly.
* Addresses are 32 bits.
* There is direct hardware support for arithmatic and logical operations on 64-bit integers.
* There is direct hardware support for floating point operations
* There are 16 64-bit general purpose registers like many x64 processors (instead of the 8 32-bit registers you often find in x84 CPUs)
* The Register are intended to be used most because they are more preformant.

Data Types
------------------------------
The registers, memory and operations use the following data types:

+------------------------+--------+--------------+
| Date Type              | Suffix | Size (bytes) |
+========================+========+==============+
| byte                   | b      | 1            |
+------------------------+--------+--------------+
| word                   | w      | 2            |
+------------------------+--------+--------------+
| double word            | l      | 4            |
+------------------------+--------+--------------+
| long word              | l      | 4            |
+------------------------+--------+--------------+
| quad word              |      q |            8 |
+------------------------+--------+--------------+
| single precision float |      s |            4 |
+------------------------+--------+--------------+
| double precision float |      d |            8 |
+------------------------+--------+--------------+

Notes:
* The "suffix" column above shows the letter used by the assembler to specify appropriately-sized variants of instructions.
* The machine is byte-addressed. It is a "little-endian" mechine.
* Addresses are 32 bits. A single step is a single byte thus the address 0x00000003 would refrence the 3rd byte, where 0x00000004 would refrence the 4th byte.

Registers and Stack
------------------------------

There are 16 Registers if you want to see them check the `Architecture Specification <../architecture/structure.html#map-of-registers>`_, 16 64-bit "general-purpose" registers;
the low-order 32, 16, and 8 bits of each register can be accessed independently under other names, as shown in the `Map of Registers <../architecture/structure.html#map-of-registers>`_

Addressing Mode
------------------------------

Register :math:`R_2 \leftarrow R_2 + R_1`

.. code-block:: kasm

    ADD R1, R2

Direct :math:`Mem[200] \leftarrow Mem[200] + R_1`

.. code-block:: kasm

    ADD R1, [200]

Indirect :math:`Mem[R_1] \leftarrow Mem[R_1] + A`

.. code-block:: kasm

    ADD A, [R1]

Immediate :math:`R_1 \leftarrow R_1 + 69`

.. code-block:: kasm

    ADI 69, R1